// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 5 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e01ba35-7f38-4698-be65-c5173ea14309
// command took 2,05s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e01ba35-7f38-4698-be65-c5173ea14309
// command took 3,17s and exited with 0
// ***** Done, took 00:00:05 (5.39 sec)   *****
// Found 5 benchmarks:
//   ArrayAccessMethods.ForCacheArray: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.For: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.ForEach: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqAggregate: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqSum: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ArrayAccessMethods.ForCacheArray: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e01ba35-7f38-4698-be65-c5173ea14309.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForCacheArray" --job "Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 0 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e01ba35-7f38-4698-be65-c5173ea14309\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-JZTKCY(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 439700.00 ns, 439.7000 us/op
WorkloadJitting  1: 1 op, 9191600.00 ns, 9.1916 ms/op

OverheadWarmup   1: 3 op, 5900.00 ns, 1.9667 us/op
OverheadWarmup   2: 3 op, 200.00 ns, 66.6667 ns/op
OverheadWarmup   3: 3 op, 400.00 ns, 133.3333 ns/op
OverheadWarmup   4: 3 op, 400.00 ns, 133.3333 ns/op
OverheadWarmup   5: 3 op, 200.00 ns, 66.6667 ns/op
OverheadWarmup   6: 3 op, 200.00 ns, 66.6667 ns/op

OverheadActual   1: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   2: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   3: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   4: 3 op, 1800.00 ns, 600.0000 ns/op
OverheadActual   5: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   6: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   7: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   8: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   9: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  10: 3 op, 100.00 ns, 33.3333 ns/op
OverheadActual  11: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  12: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  13: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  14: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  15: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  16: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  17: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  18: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  19: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  20: 3 op, 400.00 ns, 133.3333 ns/op

WorkloadWarmup   1: 3 op, 26565200.00 ns, 8.8551 ms/op

// BeforeActualRun
WorkloadActual   1: 3 op, 25993400.00 ns, 8.6645 ms/op
WorkloadActual   2: 3 op, 25704100.00 ns, 8.5680 ms/op
WorkloadActual   3: 3 op, 26078200.00 ns, 8.6927 ms/op
WorkloadActual   4: 3 op, 26072800.00 ns, 8.6909 ms/op
WorkloadActual   5: 3 op, 26635900.00 ns, 8.8786 ms/op
WorkloadActual   6: 3 op, 26643400.00 ns, 8.8811 ms/op
WorkloadActual   7: 3 op, 26472600.00 ns, 8.8242 ms/op
WorkloadActual   8: 3 op, 26092500.00 ns, 8.6975 ms/op
WorkloadActual   9: 3 op, 25550100.00 ns, 8.5167 ms/op
WorkloadActual  10: 3 op, 27438100.00 ns, 9.1460 ms/op

// AfterActualRun
WorkloadResult   1: 3 op, 25993000.00 ns, 8.6643 ms/op
WorkloadResult   2: 3 op, 25703700.00 ns, 8.5679 ms/op
WorkloadResult   3: 3 op, 26077800.00 ns, 8.6926 ms/op
WorkloadResult   4: 3 op, 26072400.00 ns, 8.6908 ms/op
WorkloadResult   5: 3 op, 26635500.00 ns, 8.8785 ms/op
WorkloadResult   6: 3 op, 26643000.00 ns, 8.8810 ms/op
WorkloadResult   7: 3 op, 26472200.00 ns, 8.8241 ms/op
WorkloadResult   8: 3 op, 26092100.00 ns, 8.6974 ms/op
WorkloadResult   9: 3 op, 25549700.00 ns, 8.5166 ms/op
WorkloadResult  10: 3 op, 27437700.00 ns, 9.1459 ms/op
GC:  0 0 0 0 0

// AfterAll

Mean = 8.7559 ms, StdErr = 0.0577 ms (0.66%); N = 10, StdDev = 0.1826 ms
Min = 8.5166 ms, Q1 = 8.6643 ms, Median = 8.6950 ms, Q3 = 8.8785 ms, Max = 9.1459 ms
IQR = 0.2142 ms, LowerFence = 8.3431 ms, UpperFence = 9.1998 ms
ConfidenceInterval = [8.4798 ms; 9.0320 ms] (CI 99.9%), Margin = 0.2761 ms (3.15% of Mean)
Skewness = 0.68, Kurtosis = 2.54, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.For: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e01ba35-7f38-4698-be65-c5173ea14309.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.For" --job "Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e01ba35-7f38-4698-be65-c5173ea14309\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-QKFTQP(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 429500.00 ns, 429.5000 us/op
WorkloadJitting  1: 1 op, 10693100.00 ns, 10.6931 ms/op

OverheadWarmup   1: 3 op, 4000.00 ns, 1.3333 us/op
OverheadWarmup   2: 3 op, 500.00 ns, 166.6667 ns/op
OverheadWarmup   3: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   4: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   5: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   6: 3 op, 500.00 ns, 166.6667 ns/op
OverheadWarmup   7: 3 op, 400.00 ns, 133.3333 ns/op

OverheadActual   1: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   2: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   3: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   4: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   5: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   6: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual   7: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   8: 3 op, 1800.00 ns, 600.0000 ns/op
OverheadActual   9: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  10: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  11: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  12: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  13: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  14: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  15: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  16: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  17: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  18: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  19: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  20: 3 op, 1800.00 ns, 600.0000 ns/op

WorkloadWarmup   1: 3 op, 31014600.00 ns, 10.3382 ms/op

// BeforeActualRun
WorkloadActual   1: 3 op, 31421500.00 ns, 10.4738 ms/op
WorkloadActual   2: 3 op, 31183400.00 ns, 10.3945 ms/op
WorkloadActual   3: 3 op, 31260100.00 ns, 10.4200 ms/op
WorkloadActual   4: 3 op, 31734100.00 ns, 10.5780 ms/op
WorkloadActual   5: 3 op, 31182100.00 ns, 10.3940 ms/op
WorkloadActual   6: 3 op, 31129800.00 ns, 10.3766 ms/op
WorkloadActual   7: 3 op, 31036800.00 ns, 10.3456 ms/op
WorkloadActual   8: 3 op, 30970500.00 ns, 10.3235 ms/op
WorkloadActual   9: 3 op, 30780600.00 ns, 10.2602 ms/op
WorkloadActual  10: 3 op, 31008100.00 ns, 10.3360 ms/op

// AfterActualRun
WorkloadResult   1: 3 op, 31421200.00 ns, 10.4737 ms/op
WorkloadResult   2: 3 op, 31183100.00 ns, 10.3944 ms/op
WorkloadResult   3: 3 op, 31259800.00 ns, 10.4199 ms/op
WorkloadResult   4: 3 op, 31181800.00 ns, 10.3939 ms/op
WorkloadResult   5: 3 op, 31129500.00 ns, 10.3765 ms/op
WorkloadResult   6: 3 op, 31036500.00 ns, 10.3455 ms/op
WorkloadResult   7: 3 op, 30970200.00 ns, 10.3234 ms/op
WorkloadResult   8: 3 op, 30780300.00 ns, 10.2601 ms/op
WorkloadResult   9: 3 op, 31007800.00 ns, 10.3359 ms/op
GC:  0 0 0 0 0

// AfterAll

Mean = 10.3693 ms, StdErr = 0.0206 ms (0.20%); N = 9, StdDev = 0.0617 ms
Min = 10.2601 ms, Q1 = 10.3297 ms, Median = 10.3765 ms, Q3 = 10.4072 ms, Max = 10.4737 ms
IQR = 0.0775 ms, LowerFence = 10.2134 ms, UpperFence = 10.5234 ms
ConfidenceInterval = [10.2656 ms; 10.4730 ms] (CI 99.9%), Margin = 0.1037 ms (1.00% of Mean)
Skewness = -0.07, Kurtosis = 2.1, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.ForEach: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e01ba35-7f38-4698-be65-c5173ea14309.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForEach" --job "Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 2 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e01ba35-7f38-4698-be65-c5173ea14309\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-IHNFRU(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 438600.00 ns, 438.6000 us/op
WorkloadJitting  1: 1 op, 9150400.00 ns, 9.1504 ms/op

OverheadWarmup   1: 3 op, 4900.00 ns, 1.6333 us/op
OverheadWarmup   2: 3 op, 400.00 ns, 133.3333 ns/op
OverheadWarmup   3: 3 op, 200.00 ns, 66.6667 ns/op
OverheadWarmup   4: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   5: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   6: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   7: 3 op, 300.00 ns, 100.0000 ns/op

OverheadActual   1: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual   2: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   3: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   4: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual   5: 3 op, 100.00 ns, 33.3333 ns/op
OverheadActual   6: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual   7: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   8: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   9: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  10: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  11: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  12: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  13: 3 op, 1800.00 ns, 600.0000 ns/op
OverheadActual  14: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  15: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  16: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  17: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  18: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  19: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  20: 3 op, 400.00 ns, 133.3333 ns/op

WorkloadWarmup   1: 3 op, 26061200.00 ns, 8.6871 ms/op

// BeforeActualRun
WorkloadActual   1: 3 op, 25797600.00 ns, 8.5992 ms/op
WorkloadActual   2: 3 op, 26471000.00 ns, 8.8237 ms/op
WorkloadActual   3: 3 op, 26415000.00 ns, 8.8050 ms/op
WorkloadActual   4: 3 op, 26455300.00 ns, 8.8184 ms/op
WorkloadActual   5: 3 op, 26884600.00 ns, 8.9615 ms/op
WorkloadActual   6: 3 op, 26330700.00 ns, 8.7769 ms/op
WorkloadActual   7: 3 op, 25894000.00 ns, 8.6313 ms/op
WorkloadActual   8: 3 op, 26769600.00 ns, 8.9232 ms/op
WorkloadActual   9: 3 op, 26172000.00 ns, 8.7240 ms/op
WorkloadActual  10: 3 op, 26332900.00 ns, 8.7776 ms/op

// AfterActualRun
WorkloadResult   1: 3 op, 25797200.00 ns, 8.5991 ms/op
WorkloadResult   2: 3 op, 26470600.00 ns, 8.8235 ms/op
WorkloadResult   3: 3 op, 26414600.00 ns, 8.8049 ms/op
WorkloadResult   4: 3 op, 26454900.00 ns, 8.8183 ms/op
WorkloadResult   5: 3 op, 26884200.00 ns, 8.9614 ms/op
WorkloadResult   6: 3 op, 26330300.00 ns, 8.7768 ms/op
WorkloadResult   7: 3 op, 25893600.00 ns, 8.6312 ms/op
WorkloadResult   8: 3 op, 26769200.00 ns, 8.9231 ms/op
WorkloadResult   9: 3 op, 26171600.00 ns, 8.7239 ms/op
WorkloadResult  10: 3 op, 26332500.00 ns, 8.7775 ms/op
GC:  0 0 0 0 0

// AfterAll

Mean = 8.7840 ms, StdErr = 0.0358 ms (0.41%); N = 10, StdDev = 0.1132 ms
Min = 8.5991 ms, Q1 = 8.7239 ms, Median = 8.7912 ms, Q3 = 8.8235 ms, Max = 8.9614 ms
IQR = 0.0997 ms, LowerFence = 8.5744 ms, UpperFence = 8.9730 ms
ConfidenceInterval = [8.6129 ms; 8.9550 ms] (CI 99.9%), Margin = 0.1711 ms (1.95% of Mean)
Skewness = -0.12, Kurtosis = 1.89, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqAggregate: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e01ba35-7f38-4698-be65-c5173ea14309.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAggregate" --job "Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 3 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e01ba35-7f38-4698-be65-c5173ea14309\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-TFNQMW(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 437000.00 ns, 437.0000 us/op
WorkloadJitting  1: 1 op, 72496900.00 ns, 72.4969 ms/op

OverheadWarmup   1: 3 op, 6100.00 ns, 2.0333 us/op
OverheadWarmup   2: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   3: 3 op, 200.00 ns, 66.6667 ns/op
OverheadWarmup   4: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   5: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   6: 3 op, 500.00 ns, 166.6667 ns/op
OverheadWarmup   7: 3 op, 500.00 ns, 166.6667 ns/op

OverheadActual   1: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual   2: 3 op, 600.00 ns, 200.0000 ns/op
OverheadActual   3: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   4: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual   5: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual   6: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual   7: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   8: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   9: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  10: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  11: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  12: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  13: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  14: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  15: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  16: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  17: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  18: 3 op, 1900.00 ns, 633.3333 ns/op
OverheadActual  19: 3 op, 200.00 ns, 66.6667 ns/op
OverheadActual  20: 3 op, 200.00 ns, 66.6667 ns/op

WorkloadWarmup   1: 3 op, 209993400.00 ns, 69.9978 ms/op

// BeforeActualRun
WorkloadActual   1: 3 op, 210076500.00 ns, 70.0255 ms/op
WorkloadActual   2: 3 op, 211091200.00 ns, 70.3637 ms/op
WorkloadActual   3: 3 op, 210460100.00 ns, 70.1534 ms/op
WorkloadActual   4: 3 op, 209748100.00 ns, 69.9160 ms/op
WorkloadActual   5: 3 op, 210781400.00 ns, 70.2605 ms/op
WorkloadActual   6: 3 op, 214304300.00 ns, 71.4348 ms/op
WorkloadActual   7: 3 op, 210443400.00 ns, 70.1478 ms/op
WorkloadActual   8: 3 op, 210328000.00 ns, 70.1093 ms/op
WorkloadActual   9: 3 op, 210333100.00 ns, 70.1110 ms/op
WorkloadActual  10: 3 op, 208860900.00 ns, 69.6203 ms/op

// AfterActualRun
WorkloadResult   1: 3 op, 210076200.00 ns, 70.0254 ms/op
WorkloadResult   2: 3 op, 211090900.00 ns, 70.3636 ms/op
WorkloadResult   3: 3 op, 210459800.00 ns, 70.1533 ms/op
WorkloadResult   4: 3 op, 209747800.00 ns, 69.9159 ms/op
WorkloadResult   5: 3 op, 210781100.00 ns, 70.2604 ms/op
WorkloadResult   6: 3 op, 210443100.00 ns, 70.1477 ms/op
WorkloadResult   7: 3 op, 210327700.00 ns, 70.1092 ms/op
WorkloadResult   8: 3 op, 210332800.00 ns, 70.1109 ms/op
WorkloadResult   9: 3 op, 208860600.00 ns, 69.6202 ms/op
GC:  0 0 0 0 0

// AfterAll

Mean = 70.0785 ms, StdErr = 0.0713 ms (0.10%); N = 9, StdDev = 0.2139 ms
Min = 69.6202 ms, Q1 = 69.9707 ms, Median = 70.1109 ms, Q3 = 70.2068 ms, Max = 70.3636 ms
IQR = 0.2362 ms, LowerFence = 69.6164 ms, UpperFence = 70.5610 ms
ConfidenceInterval = [69.7191 ms; 70.4380 ms] (CI 99.9%), Margin = 0.3595 ms (0.51% of Mean)
Skewness = -0.8, Kurtosis = 2.79, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqSum: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e01ba35-7f38-4698-be65-c5173ea14309.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqSum" --job "Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 4 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e01ba35-7f38-4698-be65-c5173ea14309\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-MMXWYA(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 422800.00 ns, 422.8000 us/op
WorkloadJitting  1: 1 op, 88511000.00 ns, 88.5110 ms/op

OverheadWarmup   1: 3 op, 4600.00 ns, 1.5333 us/op
OverheadWarmup   2: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   3: 3 op, 1900.00 ns, 633.3333 ns/op
OverheadWarmup   4: 3 op, 1900.00 ns, 633.3333 ns/op
OverheadWarmup   5: 3 op, 500.00 ns, 166.6667 ns/op
OverheadWarmup   6: 3 op, 400.00 ns, 133.3333 ns/op
OverheadWarmup   7: 3 op, 300.00 ns, 100.0000 ns/op
OverheadWarmup   8: 3 op, 1900.00 ns, 633.3333 ns/op

OverheadActual   1: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   2: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   3: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   4: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   5: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   6: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   7: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual   8: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual   9: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  10: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  11: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  12: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  13: 3 op, 600.00 ns, 200.0000 ns/op
OverheadActual  14: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  15: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  16: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  17: 3 op, 300.00 ns, 100.0000 ns/op
OverheadActual  18: 3 op, 400.00 ns, 133.3333 ns/op
OverheadActual  19: 3 op, 500.00 ns, 166.6667 ns/op
OverheadActual  20: 3 op, 500.00 ns, 166.6667 ns/op

WorkloadWarmup   1: 3 op, 263935300.00 ns, 87.9784 ms/op

// BeforeActualRun
WorkloadActual   1: 3 op, 260010300.00 ns, 86.6701 ms/op
WorkloadActual   2: 3 op, 261324400.00 ns, 87.1081 ms/op
WorkloadActual   3: 3 op, 263629700.00 ns, 87.8766 ms/op
WorkloadActual   4: 3 op, 259874400.00 ns, 86.6248 ms/op
WorkloadActual   5: 3 op, 259649300.00 ns, 86.5498 ms/op
WorkloadActual   6: 3 op, 264671900.00 ns, 88.2240 ms/op
WorkloadActual   7: 3 op, 260172000.00 ns, 86.7240 ms/op
WorkloadActual   8: 3 op, 264885400.00 ns, 88.2951 ms/op
WorkloadActual   9: 3 op, 260279400.00 ns, 86.7598 ms/op
WorkloadActual  10: 3 op, 260112200.00 ns, 86.7041 ms/op

// AfterActualRun
WorkloadResult   1: 3 op, 260009900.00 ns, 86.6700 ms/op
WorkloadResult   2: 3 op, 261324000.00 ns, 87.1080 ms/op
WorkloadResult   3: 3 op, 263629300.00 ns, 87.8764 ms/op
WorkloadResult   4: 3 op, 259874000.00 ns, 86.6247 ms/op
WorkloadResult   5: 3 op, 259648900.00 ns, 86.5496 ms/op
WorkloadResult   6: 3 op, 264671500.00 ns, 88.2238 ms/op
WorkloadResult   7: 3 op, 260171600.00 ns, 86.7239 ms/op
WorkloadResult   8: 3 op, 264885000.00 ns, 88.2950 ms/op
WorkloadResult   9: 3 op, 260279000.00 ns, 86.7597 ms/op
WorkloadResult  10: 3 op, 260111800.00 ns, 86.7039 ms/op
GC:  0 0 0 0 0

// AfterAll

Mean = 87.1535 ms, StdErr = 0.2209 ms (0.25%); N = 10, StdDev = 0.6987 ms
Min = 86.5496 ms, Q1 = 86.6700 ms, Median = 86.7418 ms, Q3 = 87.8764 ms, Max = 88.2950 ms
IQR = 1.2065 ms, LowerFence = 84.8603 ms, UpperFence = 89.6861 ms
ConfidenceInterval = [86.0972 ms; 88.2098 ms] (CI 99.9%), Margin = 1.0563 ms (1.21% of Mean)
Skewness = 0.7, Kurtosis = 1.53, MValue = 2

Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.csv
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report-github.md
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.html

// * Detailed results *
ArrayAccessMethods.ForCacheArray: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 8.7559 ms, StdErr = 0.0577 ms (0.66%); N = 10, StdDev = 0.1826 ms
Min = 8.5166 ms, Q1 = 8.6643 ms, Median = 8.6950 ms, Q3 = 8.8785 ms, Max = 9.1459 ms
IQR = 0.2142 ms, LowerFence = 8.3431 ms, UpperFence = 9.1998 ms
ConfidenceInterval = [8.4798 ms; 9.0320 ms] (CI 99.9%), Margin = 0.2761 ms (3.15% of Mean)
Skewness = 0.68, Kurtosis = 2.54, MValue = 2
-------------------- Histogram --------------------
[8.442 ms ; 8.719 ms) | @@@@@@
[8.719 ms ; 8.941 ms) | @@@
[8.941 ms ; 9.220 ms) | @
---------------------------------------------------

ArrayAccessMethods.For: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 10.3693 ms, StdErr = 0.0206 ms (0.20%); N = 9, StdDev = 0.0617 ms
Min = 10.2601 ms, Q1 = 10.3297 ms, Median = 10.3765 ms, Q3 = 10.4072 ms, Max = 10.4737 ms
IQR = 0.0775 ms, LowerFence = 10.2134 ms, UpperFence = 10.5234 ms
ConfidenceInterval = [10.2656 ms; 10.4730 ms] (CI 99.9%), Margin = 0.1037 ms (1.00% of Mean)
Skewness = -0.07, Kurtosis = 2.1, MValue = 2
-------------------- Histogram --------------------
[10.234 ms ; 10.500 ms) | @@@@@@@@@
---------------------------------------------------

ArrayAccessMethods.ForEach: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 8.7840 ms, StdErr = 0.0358 ms (0.41%); N = 10, StdDev = 0.1132 ms
Min = 8.5991 ms, Q1 = 8.7239 ms, Median = 8.7912 ms, Q3 = 8.8235 ms, Max = 8.9614 ms
IQR = 0.0997 ms, LowerFence = 8.5744 ms, UpperFence = 8.9730 ms
ConfidenceInterval = [8.6129 ms; 8.9550 ms] (CI 99.9%), Margin = 0.1711 ms (1.95% of Mean)
Skewness = -0.12, Kurtosis = 1.89, MValue = 2
-------------------- Histogram --------------------
[8.553 ms ; 9.007 ms) | @@@@@@@@@@
---------------------------------------------------

ArrayAccessMethods.LinqAggregate: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 70.0785 ms, StdErr = 0.0713 ms (0.10%); N = 9, StdDev = 0.2139 ms
Min = 69.6202 ms, Q1 = 69.9707 ms, Median = 70.1109 ms, Q3 = 70.2068 ms, Max = 70.3636 ms
IQR = 0.2362 ms, LowerFence = 69.6164 ms, UpperFence = 70.5610 ms
ConfidenceInterval = [69.7191 ms; 70.4380 ms] (CI 99.9%), Margin = 0.3595 ms (0.51% of Mean)
Skewness = -0.8, Kurtosis = 2.79, MValue = 2
-------------------- Histogram --------------------
[69.530 ms ; 70.454 ms) | @@@@@@@@@
---------------------------------------------------

ArrayAccessMethods.LinqSum: Job-NWWSJS(Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 87.1535 ms, StdErr = 0.2209 ms (0.25%); N = 10, StdDev = 0.6987 ms
Min = 86.5496 ms, Q1 = 86.6700 ms, Median = 86.7418 ms, Q3 = 87.8764 ms, Max = 88.2950 ms
IQR = 1.2065 ms, LowerFence = 84.8603 ms, UpperFence = 89.6861 ms
ConfidenceInterval = [86.0972 ms; 88.2098 ms] (CI 99.9%), Margin = 1.0563 ms (1.21% of Mean)
Skewness = 0.7, Kurtosis = 1.53, MValue = 2
-------------------- Histogram --------------------
[86.266 ms ; 88.579 ms) | @@@@@@@@@@
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)
Intel Core i7-5820K CPU 3.30GHz (Broadwell), 1 CPU, 12 logical and 6 physical cores
.NET Core SDK=2.2.105
  [Host]     : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
  Job-NWWSJS : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT

Server=True  InvocationCount=3  IterationCount=10  
LaunchCount=1  RunStrategy=Throughput  UnrollFactor=1  
WarmupCount=1  

|        Method |      Mean |     Error |    StdDev | Ratio | RatioSD |
|-------------- |----------:|----------:|----------:|------:|--------:|
| ForCacheArray |  8.756 ms | 0.2761 ms | 0.1826 ms |  1.00 |    0.00 |
|           For | 10.369 ms | 0.1037 ms | 0.0617 ms |  1.19 |    0.02 |
|       ForEach |  8.784 ms | 0.1711 ms | 0.1132 ms |  1.00 |    0.02 |
| LinqAggregate | 70.079 ms | 0.3595 ms | 0.2139 ms |  8.04 |    0.11 |
|       LinqSum | 87.154 ms | 1.0563 ms | 0.6987 ms |  9.96 |    0.22 |

// * Warnings *
MinIterationTime
  ArrayAccessMethods.ForCacheArray: Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 25.5501 ms which is very small. It's recommended to increase it.
  ArrayAccessMethods.For: Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1           -> The minimum observed iteration time is 30.7806 ms which is very small. It's recommended to increase it.
  ArrayAccessMethods.ForEach: Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 25.7976 ms which is very small. It's recommended to increase it.

// * Hints *
Outliers
  ArrayAccessMethods.For: Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1           -> 1 outlier  was  removed (10.58 ms)
  ArrayAccessMethods.LinqAggregate: Server=True, InvocationCount=3, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> 1 outlier  was  removed, 2 outliers were detected (69.62 ms, 71.43 ms)

// * Legends *
  Mean    : Arithmetic mean of all measurements
  Error   : Half of 99.9% confidence interval
  StdDev  : Standard deviation of all measurements
  Ratio   : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])
  1 ms    : 1 Millisecond (0.001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:10 (10.61 sec), executed benchmarks: 5

Global total time: 00:00:16 (16.01 sec), executed benchmarks: 5
// * Artifacts cleanup *
