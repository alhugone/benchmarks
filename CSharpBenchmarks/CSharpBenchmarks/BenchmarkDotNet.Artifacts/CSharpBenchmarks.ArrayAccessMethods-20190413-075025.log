// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 5 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\70799bea-a17a-4834-b4cd-3ffbaf67fc71
// command took 2s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\70799bea-a17a-4834-b4cd-3ffbaf67fc71
// command took 2,97s and exited with 0
// ***** Done, took 00:00:05 (5.12 sec)   *****
// Found 5 benchmarks:
//   ArrayAccessMethods.ForCacheArray: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.For: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.ForEach: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqAggregate: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqSum: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ArrayAccessMethods.ForCacheArray: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "70799bea-a17a-4834-b4cd-3ffbaf67fc71.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForCacheArray" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 0 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\70799bea-a17a-4834-b4cd-3ffbaf67fc71\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-CTLFEK(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 361800.00 ns, 361.8000 us/op
WorkloadJitting  1: 1 op, 335200.00 ns, 335.2000 us/op

OverheadWarmup   1: 1 op, 3600.00 ns, 3.6000 us/op
OverheadWarmup   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   3: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   7: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   3: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  18: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 300.00 ns, 300.0000 ns/op

WorkloadWarmup   1: 1 op, 4100.00 ns, 4.1000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 800.00 ns, 800.0000 ns/op

// AfterActualRun
WorkloadResult   1: 1 op, 500.00 ns, 500.0000 ns/op
GC:  0 0 0 0 0

// AfterAll

Mean = 500.0000 ns, StdErr = 0.0000 ns (0.00%); N = 1, StdDev = 0.0000 ns
Min = 500.0000 ns, Q1 = 500.0000 ns, Median = 500.0000 ns, Q3 = 500.0000 ns, Max = 500.0000 ns
IQR = 0.0000 ns, LowerFence = 500.0000 ns, UpperFence = 500.0000 ns
ConfidenceInterval = [NaN ns; NaN ns] (CI 99.9%), Margin = NaN ns (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.For: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "70799bea-a17a-4834-b4cd-3ffbaf67fc71.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.For" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\70799bea-a17a-4834-b4cd-3ffbaf67fc71\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-JDSJAJ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 349900.00 ns, 349.9000 us/op
WorkloadJitting  1: 1 op, 349100.00 ns, 349.1000 us/op

OverheadWarmup   1: 1 op, 4100.00 ns, 4.1000 us/op
OverheadWarmup   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   3: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   7: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  16: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 5600.00 ns, 5.6000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 3000.00 ns, 3.0000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 2800.00 ns, 2.8000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 2.8000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 2.8000 us, Q1 = 2.8000 us, Median = 2.8000 us, Q3 = 2.8000 us, Max = 2.8000 us
IQR = 0.0000 us, LowerFence = 2.8000 us, UpperFence = 2.8000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.ForEach: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "70799bea-a17a-4834-b4cd-3ffbaf67fc71.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForEach" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 2 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\70799bea-a17a-4834-b4cd-3ffbaf67fc71\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-WUWIIJ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 327700.00 ns, 327.7000 us/op
WorkloadJitting  1: 1 op, 349600.00 ns, 349.6000 us/op

OverheadWarmup   1: 1 op, 4000.00 ns, 4.0000 us/op
OverheadWarmup   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   3: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   9: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  10: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 300.00 ns, 300.0000 ns/op

WorkloadWarmup   1: 1 op, 5800.00 ns, 5.8000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 2000.00 ns, 2.0000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 1700.00 ns, 1.7000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 1.7000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 1.7000 us, Q1 = 1.7000 us, Median = 1.7000 us, Q3 = 1.7000 us, Max = 1.7000 us
IQR = 0.0000 us, LowerFence = 1.7000 us, UpperFence = 1.7000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqAggregate: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "70799bea-a17a-4834-b4cd-3ffbaf67fc71.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAggregate" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 3 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\70799bea-a17a-4834-b4cd-3ffbaf67fc71\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-WYSOMG(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 358100.00 ns, 358.1000 us/op
WorkloadJitting  1: 1 op, 1130100.00 ns, 1.1301 ms/op

OverheadWarmup   1: 1 op, 2700.00 ns, 2.7000 us/op
OverheadWarmup   2: 1 op, 1700.00 ns, 1.7000 us/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   7: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual   3: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   4: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual   5: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  10: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  11: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  12: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 16500.00 ns, 16.5000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 12300.00 ns, 12.3000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 12100.00 ns, 12.1000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 12.1000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 12.1000 us, Q1 = 12.1000 us, Median = 12.1000 us, Q3 = 12.1000 us, Max = 12.1000 us
IQR = 0.0000 us, LowerFence = 12.1000 us, UpperFence = 12.1000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqSum: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "70799bea-a17a-4834-b4cd-3ffbaf67fc71.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqSum" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 4 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\70799bea-a17a-4834-b4cd-3ffbaf67fc71\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-ZOPTCX(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 345900.00 ns, 345.9000 us/op
WorkloadJitting  1: 1 op, 1087300.00 ns, 1.0873 ms/op

OverheadWarmup   1: 1 op, 3000.00 ns, 3.0000 us/op
OverheadWarmup   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 100.00 ns, 100.0000 ns/op
OverheadWarmup   7: 1 op, 300.00 ns, 300.0000 ns/op

OverheadActual   1: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   3: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   9: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 17400.00 ns, 17.4000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 13500.00 ns, 13.5000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 13300.00 ns, 13.3000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 13.3000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 13.3000 us, Q1 = 13.3000 us, Median = 13.3000 us, Q3 = 13.3000 us, Max = 13.3000 us
IQR = 0.0000 us, LowerFence = 13.3000 us, UpperFence = 13.3000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.csv
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report-github.md
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.html

// * Detailed results *
ArrayAccessMethods.ForCacheArray: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 500.0000 ns, StdErr = 0.0000 ns (0.00%); N = 1, StdDev = 0.0000 ns
Min = 500.0000 ns, Q1 = 500.0000 ns, Median = 500.0000 ns, Q3 = 500.0000 ns, Max = 500.0000 ns
IQR = 0.0000 ns, LowerFence = 500.0000 ns, UpperFence = 500.0000 ns
ConfidenceInterval = [NaN ns; NaN ns] (CI 99.9%), Margin = NaN ns (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[499.500 ns ; 500.500 ns) | @
---------------------------------------------------

ArrayAccessMethods.For: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 2.8000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 2.8000 us, Q1 = 2.8000 us, Median = 2.8000 us, Q3 = 2.8000 us, Max = 2.8000 us
IQR = 0.0000 us, LowerFence = 2.8000 us, UpperFence = 2.8000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[2.800 us ; 2.801 us) | @
---------------------------------------------------

ArrayAccessMethods.ForEach: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 1.7000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 1.7000 us, Q1 = 1.7000 us, Median = 1.7000 us, Q3 = 1.7000 us, Max = 1.7000 us
IQR = 0.0000 us, LowerFence = 1.7000 us, UpperFence = 1.7000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[1.700 us ; 1.701 us) | @
---------------------------------------------------

ArrayAccessMethods.LinqAggregate: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 12.1000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 12.1000 us, Q1 = 12.1000 us, Median = 12.1000 us, Q3 = 12.1000 us, Max = 12.1000 us
IQR = 0.0000 us, LowerFence = 12.1000 us, UpperFence = 12.1000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[12.100 us ; 12.101 us) | @
---------------------------------------------------

ArrayAccessMethods.LinqSum: Job-YLNLUN(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 13.3000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 13.3000 us, Q1 = 13.3000 us, Median = 13.3000 us, Q3 = 13.3000 us, Max = 13.3000 us
IQR = 0.0000 us, LowerFence = 13.3000 us, UpperFence = 13.3000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[13.300 us ; 13.301 us) | @
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)
Intel Core i7-5820K CPU 3.30GHz (Broadwell), 1 CPU, 12 logical and 6 physical cores
.NET Core SDK=2.2.105
  [Host]     : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
  Job-YLNLUN : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT

Server=True  InvocationCount=1  IterationCount=1  
LaunchCount=1  RunStrategy=Throughput  UnrollFactor=1  
WarmupCount=1  

|        Method |        Mean | Error |
|-------------- |------------:|------:|
| ForCacheArray |    500.0 ns |    NA |
|           For |  2,800.0 ns |    NA |
|       ForEach |  1,700.0 ns |    NA |
| LinqAggregate | 12,100.0 ns |    NA |
|       LinqSum | 13,300.0 ns |    NA |

// * Warnings *
MinIterationTime
  ArrayAccessMethods.ForCacheArray: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 800.0000 ns which is very small. It's recommended to increase it.
  ArrayAccessMethods.For: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1           -> The minimum observed iteration time is 3.0000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.ForEach: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 2.0000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqAggregate: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 12.3000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqSum: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 13.5000 us which is very small. It's recommended to increase it.

// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:02 (2.92 sec), executed benchmarks: 5

Global total time: 00:00:08 (8.05 sec), executed benchmarks: 5
// * Artifacts cleanup *
