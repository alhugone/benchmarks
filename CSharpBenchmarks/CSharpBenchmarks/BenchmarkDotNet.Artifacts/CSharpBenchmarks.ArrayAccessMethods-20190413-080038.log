// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 5 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e186927-76c2-40c2-9f83-5de99f33b51f
// command took 1,95s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e186927-76c2-40c2-9f83-5de99f33b51f
// command took 3,05s and exited with 0
// ***** Done, took 00:00:05 (5.16 sec)   *****
// Found 5 benchmarks:
//   ArrayAccessMethods.ForCacheArray: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.For: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.ForEach: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqAggregate: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqSum: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ArrayAccessMethods.ForCacheArray: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e186927-76c2-40c2-9f83-5de99f33b51f.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForCacheArray" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 0 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e186927-76c2-40c2-9f83-5de99f33b51f\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-ZKRQBB(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 448500.00 ns, 448.5000 us/op
WorkloadJitting  1: 1 op, 500500.00 ns, 500.5000 us/op

OverheadWarmup   1: 1 op, 6100.00 ns, 6.1000 us/op
OverheadWarmup   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   3: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   7: 1 op, 400.00 ns, 400.0000 ns/op

OverheadActual   1: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   2: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual   3: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  15: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 400.00 ns, 400.0000 ns/op

WorkloadWarmup   1: 1 op, 4400.00 ns, 4.4000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 900.00 ns, 900.0000 ns/op
WorkloadActual   2: 1 op, 800.00 ns, 800.0000 ns/op
WorkloadActual   3: 1 op, 1000.00 ns, 1.0000 us/op
WorkloadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
WorkloadActual   5: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   6: 1 op, 2300.00 ns, 2.3000 us/op
WorkloadActual   7: 1 op, 2400.00 ns, 2.4000 us/op
WorkloadActual   8: 1 op, 2200.00 ns, 2.2000 us/op
WorkloadActual   9: 1 op, 1100.00 ns, 1.1000 us/op
WorkloadActual  10: 1 op, 800.00 ns, 800.0000 ns/op

// AfterActualRun
WorkloadResult   1: 1 op, 600.00 ns, 600.0000 ns/op
WorkloadResult   2: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadResult   3: 1 op, 700.00 ns, 700.0000 ns/op
WorkloadResult   4: 1 op, 0.00 ns, 0.0000 ns/op
WorkloadResult   5: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   6: 1 op, 2000.00 ns, 2.0000 us/op
WorkloadResult   7: 1 op, 2100.00 ns, 2.1000 us/op
WorkloadResult   8: 1 op, 1900.00 ns, 1.9000 us/op
WorkloadResult   9: 1 op, 800.00 ns, 800.0000 ns/op
WorkloadResult  10: 1 op, 500.00 ns, 500.0000 ns/op
GC:  0 0 0 0 0

// AfterAll

Mean = 920.0000 ns, StdErr = 248.4619 ns (27.01%); N = 10, StdDev = 785.7056 ns
Min = 0.0000 ns, Q1 = 500.0000 ns, Median = 650.0000 ns, Q3 = 1,900.0000 ns, Max = 2,100.0000 ns
IQR = 1,400.0000 ns, LowerFence = -1,600.0000 ns, UpperFence = 4,000.0000 ns
ConfidenceInterval = [-267.8748 ns; 2,107.8748 ns] (CI 99.9%), Margin = 1,187.8748 ns (129.12% of Mean)
Skewness = 0.48, Kurtosis = 1.43, MValue = 3.2

// **************************
// Benchmark: ArrayAccessMethods.For: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e186927-76c2-40c2-9f83-5de99f33b51f.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.For" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e186927-76c2-40c2-9f83-5de99f33b51f\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-TEORBQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 460300.00 ns, 460.3000 us/op
WorkloadJitting  1: 1 op, 412700.00 ns, 412.7000 us/op

OverheadWarmup   1: 1 op, 5800.00 ns, 5.8000 us/op
OverheadWarmup   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   3: 1 op, 1900.00 ns, 1.9000 us/op
OverheadWarmup   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   7: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   3: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   9: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  14: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  18: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  19: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 5000.00 ns, 5.0000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   2: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   3: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   4: 1 op, 2000.00 ns, 2.0000 us/op
WorkloadActual   5: 1 op, 900.00 ns, 900.0000 ns/op
WorkloadActual   6: 1 op, 600.00 ns, 600.0000 ns/op
WorkloadActual   7: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   8: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   9: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual  10: 1 op, 600.00 ns, 600.0000 ns/op

// AfterActualRun
WorkloadResult   1: 1 op, 300.00 ns, 300.0000 ns/op
WorkloadResult   2: 1 op, 300.00 ns, 300.0000 ns/op
WorkloadResult   3: 1 op, 300.00 ns, 300.0000 ns/op
WorkloadResult   4: 1 op, 700.00 ns, 700.0000 ns/op
WorkloadResult   5: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadResult   6: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   7: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   8: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   9: 1 op, 400.00 ns, 400.0000 ns/op
GC:  0 0 0 0 0

// AfterAll

Mean = 333.3333 ns, StdErr = 52.7046 ns (15.81%); N = 9, StdDev = 158.1139 ns
Min = 200.0000 ns, Q1 = 200.0000 ns, Median = 300.0000 ns, Q3 = 400.0000 ns, Max = 700.0000 ns
IQR = 200.0000 ns, LowerFence = -100.0000 ns, UpperFence = 700.0000 ns
ConfidenceInterval = [67.6332 ns; 599.0335 ns] (CI 99.9%), Margin = 265.7001 ns (79.71% of Mean)
Skewness = 1.2, Kurtosis = 3.39, MValue = 3

// **************************
// Benchmark: ArrayAccessMethods.ForEach: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e186927-76c2-40c2-9f83-5de99f33b51f.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForEach" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 2 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e186927-76c2-40c2-9f83-5de99f33b51f\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-HUIDII(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 483900.00 ns, 483.9000 us/op
WorkloadJitting  1: 1 op, 409200.00 ns, 409.2000 us/op

OverheadWarmup   1: 1 op, 4200.00 ns, 4.2000 us/op
OverheadWarmup   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 300.00 ns, 300.0000 ns/op

OverheadActual   1: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   9: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  10: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  11: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  12: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  13: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  19: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 6100.00 ns, 6.1000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 900.00 ns, 900.0000 ns/op
WorkloadActual   2: 1 op, 800.00 ns, 800.0000 ns/op
WorkloadActual   3: 1 op, 600.00 ns, 600.0000 ns/op
WorkloadActual   4: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   5: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   6: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   7: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   8: 1 op, 700.00 ns, 700.0000 ns/op
WorkloadActual   9: 1 op, 600.00 ns, 600.0000 ns/op
WorkloadActual  10: 1 op, 1100.00 ns, 1.1000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 600.00 ns, 600.0000 ns/op
WorkloadResult   2: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadResult   3: 1 op, 300.00 ns, 300.0000 ns/op
WorkloadResult   4: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   5: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   6: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   7: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   8: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadResult   9: 1 op, 300.00 ns, 300.0000 ns/op
WorkloadResult  10: 1 op, 800.00 ns, 800.0000 ns/op
GC:  0 0 0 0 0

// AfterAll

Mean = 360.0000 ns, StdErr = 68.6375 ns (19.07%); N = 10, StdDev = 217.0509 ns
Min = 100.0000 ns, Q1 = 200.0000 ns, Median = 300.0000 ns, Q3 = 500.0000 ns, Max = 800.0000 ns
IQR = 300.0000 ns, LowerFence = -250.0000 ns, UpperFence = 950.0000 ns
ConfidenceInterval = [31.8499 ns; 688.1501 ns] (CI 99.9%), Margin = 328.1501 ns (91.15% of Mean)
Skewness = 0.7, Kurtosis = 2.15, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqAggregate: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e186927-76c2-40c2-9f83-5de99f33b51f.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAggregate" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 3 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e186927-76c2-40c2-9f83-5de99f33b51f\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-JHKGIR(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 435400.00 ns, 435.4000 us/op
WorkloadJitting  1: 1 op, 1295800.00 ns, 1.2958 ms/op

OverheadWarmup   1: 1 op, 4000.00 ns, 4.0000 us/op
OverheadWarmup   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   7: 1 op, 1900.00 ns, 1.9000 us/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual   6: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  17: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  20: 1 op, 1800.00 ns, 1.8000 us/op

WorkloadWarmup   1: 1 op, 9800.00 ns, 9.8000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 6900.00 ns, 6.9000 us/op
WorkloadActual   2: 1 op, 5400.00 ns, 5.4000 us/op
WorkloadActual   3: 1 op, 5400.00 ns, 5.4000 us/op
WorkloadActual   4: 1 op, 6300.00 ns, 6.3000 us/op
WorkloadActual   5: 1 op, 5900.00 ns, 5.9000 us/op
WorkloadActual   6: 1 op, 2900.00 ns, 2.9000 us/op
WorkloadActual   7: 1 op, 12500.00 ns, 12.5000 us/op
WorkloadActual   8: 1 op, 7200.00 ns, 7.2000 us/op
WorkloadActual   9: 1 op, 6300.00 ns, 6.3000 us/op
WorkloadActual  10: 1 op, 4200.00 ns, 4.2000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 6600.00 ns, 6.6000 us/op
WorkloadResult   2: 1 op, 5100.00 ns, 5.1000 us/op
WorkloadResult   3: 1 op, 5100.00 ns, 5.1000 us/op
WorkloadResult   4: 1 op, 6000.00 ns, 6.0000 us/op
WorkloadResult   5: 1 op, 5600.00 ns, 5.6000 us/op
WorkloadResult   6: 1 op, 2600.00 ns, 2.6000 us/op
WorkloadResult   7: 1 op, 6900.00 ns, 6.9000 us/op
WorkloadResult   8: 1 op, 6000.00 ns, 6.0000 us/op
WorkloadResult   9: 1 op, 3900.00 ns, 3.9000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 5.3111 us, StdErr = 0.4511 us (8.49%); N = 9, StdDev = 1.3532 us
Min = 2.6000 us, Q1 = 4.5000 us, Median = 5.6000 us, Q3 = 6.3000 us, Max = 6.9000 us
IQR = 1.8000 us, LowerFence = 1.8000 us, UpperFence = 9.0000 us
ConfidenceInterval = [3.0372 us; 7.5851 us] (CI 99.9%), Margin = 2.2739 us (42.81% of Mean)
Skewness = -0.71, Kurtosis = 2.24, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqSum: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "9e186927-76c2-40c2-9f83-5de99f33b51f.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqSum" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 4 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\9e186927-76c2-40c2-9f83-5de99f33b51f\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-BRDWUS(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 429000.00 ns, 429.0000 us/op
WorkloadJitting  1: 1 op, 1310500.00 ns, 1.3105 ms/op

OverheadWarmup   1: 1 op, 4800.00 ns, 4.8000 us/op
OverheadWarmup   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   3: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   5: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   6: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   7: 1 op, 300.00 ns, 300.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   9: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  10: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  11: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  12: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  17: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  20: 1 op, 300.00 ns, 300.0000 ns/op

WorkloadWarmup   1: 1 op, 14700.00 ns, 14.7000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 7500.00 ns, 7.5000 us/op
WorkloadActual   2: 1 op, 6900.00 ns, 6.9000 us/op
WorkloadActual   3: 1 op, 3300.00 ns, 3.3000 us/op
WorkloadActual   4: 1 op, 7200.00 ns, 7.2000 us/op
WorkloadActual   5: 1 op, 14900.00 ns, 14.9000 us/op
WorkloadActual   6: 1 op, 5800.00 ns, 5.8000 us/op
WorkloadActual   7: 1 op, 5700.00 ns, 5.7000 us/op
WorkloadActual   8: 1 op, 7900.00 ns, 7.9000 us/op
WorkloadActual   9: 1 op, 7100.00 ns, 7.1000 us/op
WorkloadActual  10: 1 op, 3200.00 ns, 3.2000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 7200.00 ns, 7.2000 us/op
WorkloadResult   2: 1 op, 6600.00 ns, 6.6000 us/op
WorkloadResult   3: 1 op, 3000.00 ns, 3.0000 us/op
WorkloadResult   4: 1 op, 6900.00 ns, 6.9000 us/op
WorkloadResult   5: 1 op, 5500.00 ns, 5.5000 us/op
WorkloadResult   6: 1 op, 5400.00 ns, 5.4000 us/op
WorkloadResult   7: 1 op, 7600.00 ns, 7.6000 us/op
WorkloadResult   8: 1 op, 6800.00 ns, 6.8000 us/op
WorkloadResult   9: 1 op, 2900.00 ns, 2.9000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 5.7667 us, StdErr = 0.5838 us (10.12%); N = 9, StdDev = 1.7514 us
Min = 2.9000 us, Q1 = 4.2000 us, Median = 6.6000 us, Q3 = 7.0500 us, Max = 7.6000 us
IQR = 2.8500 us, LowerFence = -0.0750 us, UpperFence = 11.3250 us
ConfidenceInterval = [2.8235 us; 8.7098 us] (CI 99.9%), Margin = 2.9432 us (51.04% of Mean)
Skewness = -0.67, Kurtosis = 1.71, MValue = 2.8

Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.csv
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report-github.md
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.html

// * Detailed results *
ArrayAccessMethods.ForCacheArray: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 920.0000 ns, StdErr = 248.4619 ns (27.01%); N = 10, StdDev = 785.7056 ns
Min = 0.0000 ns, Q1 = 500.0000 ns, Median = 650.0000 ns, Q3 = 1,900.0000 ns, Max = 2,100.0000 ns
IQR = 1,400.0000 ns, LowerFence = -1,600.0000 ns, UpperFence = 4,000.0000 ns
ConfidenceInterval = [-267.8748 ns; 2,107.8748 ns] (CI 99.9%), Margin = 1,187.8748 ns (129.12% of Mean)
Skewness = 0.48, Kurtosis = 1.43, MValue = 3.2
-------------------- Histogram --------------------
[-319.106 ns ;  330.894 ns) | @@
[ 330.894 ns ;  969.106 ns) | @@@@@
[ 969.106 ns ; 1680.894 ns) | 
[1680.894 ns ; 2419.106 ns) | @@@
---------------------------------------------------

ArrayAccessMethods.For: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 333.3333 ns, StdErr = 52.7046 ns (15.81%); N = 9, StdDev = 158.1139 ns
Min = 200.0000 ns, Q1 = 200.0000 ns, Median = 300.0000 ns, Q3 = 400.0000 ns, Max = 700.0000 ns
IQR = 200.0000 ns, LowerFence = -100.0000 ns, UpperFence = 700.0000 ns
ConfidenceInterval = [67.6332 ns; 599.0335 ns] (CI 99.9%), Margin = 265.7001 ns (79.71% of Mean)
Skewness = 1.2, Kurtosis = 3.39, MValue = 3
-------------------- Histogram --------------------
[183.488 ns ; 333.488 ns) | @@
[333.488 ns ; 466.512 ns) | @@
[466.512 ns ; 633.488 ns) | 
[633.488 ns ; 766.512 ns) | @
---------------------------------------------------

ArrayAccessMethods.ForEach: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 360.0000 ns, StdErr = 68.6375 ns (19.07%); N = 10, StdDev = 217.0509 ns
Min = 100.0000 ns, Q1 = 200.0000 ns, Median = 300.0000 ns, Q3 = 500.0000 ns, Max = 800.0000 ns
IQR = 300.0000 ns, LowerFence = -250.0000 ns, UpperFence = 950.0000 ns
ConfidenceInterval = [31.8499 ns; 688.1501 ns] (CI 99.9%), Margin = 328.1501 ns (91.15% of Mean)
Skewness = 0.7, Kurtosis = 2.15, MValue = 2
-------------------- Histogram --------------------
[ 11.847 ns ; 161.847 ns) | @
[161.847 ns ; 361.847 ns) | @@
[361.847 ns ; 538.153 ns) | @@
[538.153 ns ; 688.153 ns) | @
[688.153 ns ; 888.153 ns) | @
---------------------------------------------------

ArrayAccessMethods.LinqAggregate: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 5.3111 us, StdErr = 0.4511 us (8.49%); N = 9, StdDev = 1.3532 us
Min = 2.6000 us, Q1 = 4.5000 us, Median = 5.6000 us, Q3 = 6.3000 us, Max = 6.9000 us
IQR = 1.8000 us, LowerFence = 1.8000 us, UpperFence = 9.0000 us
ConfidenceInterval = [3.0372 us; 7.5851 us] (CI 99.9%), Margin = 2.2739 us (42.81% of Mean)
Skewness = -0.71, Kurtosis = 2.24, MValue = 2
-------------------- Histogram --------------------
[2.031 us ; 3.169 us) | @
[3.169 us ; 4.469 us) | @
[4.469 us ; 6.119 us) | @@@
[6.119 us ; 7.469 us) | @@
---------------------------------------------------

ArrayAccessMethods.LinqSum: Job-DGZFON(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 5.7667 us, StdErr = 0.5838 us (10.12%); N = 9, StdDev = 1.7514 us
Min = 2.9000 us, Q1 = 4.2000 us, Median = 6.6000 us, Q3 = 7.0500 us, Max = 7.6000 us
IQR = 2.8500 us, LowerFence = -0.0750 us, UpperFence = 11.3250 us
ConfidenceInterval = [2.8235 us; 8.7098 us] (CI 99.9%), Margin = 2.9432 us (51.04% of Mean)
Skewness = -0.67, Kurtosis = 1.71, MValue = 2.8
-------------------- Histogram --------------------
[2.163 us ; 3.687 us) | @@
[3.687 us ; 4.713 us) | 
[4.713 us ; 6.363 us) | @@
[6.363 us ; 7.837 us) | @@@@@
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)
Intel Core i7-5820K CPU 3.30GHz (Broadwell), 1 CPU, 12 logical and 6 physical cores
.NET Core SDK=2.2.105
  [Host]     : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
  Job-DGZFON : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT

Server=True  InvocationCount=1  IterationCount=10  
LaunchCount=1  RunStrategy=Throughput  UnrollFactor=1  
WarmupCount=1  

|        Method |       Mean |      Error |     StdDev |     Median | Ratio | RatioSD |
|-------------- |-----------:|-----------:|-----------:|-----------:|------:|--------:|
| ForCacheArray |   920.0 ns | 1,187.9 ns |   785.7 ns |   650.0 ns |     ? |       ? |
|           For |   333.3 ns |   265.7 ns |   158.1 ns |   300.0 ns |     ? |       ? |
|       ForEach |   360.0 ns |   328.2 ns |   217.1 ns |   300.0 ns |     ? |       ? |
| LinqAggregate | 5,311.1 ns | 2,273.9 ns | 1,353.2 ns | 5,600.0 ns |     ? |       ? |
|       LinqSum | 5,766.7 ns | 2,943.2 ns | 1,751.4 ns | 6,600.0 ns |     ? |       ? |

// * Warnings *
MinIterationTime
  ArrayAccessMethods.ForCacheArray: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 300.0000 ns which is very small. It's recommended to increase it.
  ArrayAccessMethods.For: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1           -> The minimum observed iteration time is 400.0000 ns which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqAggregate: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 2.9000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqSum: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 3.2000 us which is very small. It's recommended to increase it.

// * Hints *
Outliers
  ArrayAccessMethods.For: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1           -> 1 outlier  was  removed (2.00 us)
  ArrayAccessMethods.LinqAggregate: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> 1 outlier  was  removed, 2 outliers were detected (2.90 us, 12.50 us)
  ArrayAccessMethods.LinqSum: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> 1 outlier  was  removed (14.90 us)

// * Legends *
  Mean    : Arithmetic mean of all measurements
  Error   : Half of 99.9% confidence interval
  StdDev  : Standard deviation of all measurements
  Median  : Value separating the higher half of all measurements (50th percentile)
  Ratio   : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])
  1 ns    : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:04 (4.13 sec), executed benchmarks: 5

Global total time: 00:00:09 (9.31 sec), executed benchmarks: 5
// * Artifacts cleanup *
