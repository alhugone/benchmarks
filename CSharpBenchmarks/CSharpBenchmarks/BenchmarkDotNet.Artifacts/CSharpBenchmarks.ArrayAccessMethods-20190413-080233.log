// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 5 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\19d0fa58-37fa-41b8-807c-3b2bf9a4346c
// command took 2,01s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\19d0fa58-37fa-41b8-807c-3b2bf9a4346c
// command took 3,07s and exited with 0
// ***** Done, took 00:00:05 (5.25 sec)   *****
// Found 5 benchmarks:
//   ArrayAccessMethods.ForCacheArray: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.For: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.ForEach: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqAggregate: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqSum: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ArrayAccessMethods.ForCacheArray: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "19d0fa58-37fa-41b8-807c-3b2bf9a4346c.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForCacheArray" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 0 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\19d0fa58-37fa-41b8-807c-3b2bf9a4346c\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-JJNZMP(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 457500.00 ns, 457.5000 us/op
WorkloadJitting  1: 1 op, 395200.00 ns, 395.2000 us/op

OverheadWarmup   1: 1 op, 4000.00 ns, 4.0000 us/op
OverheadWarmup   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 1900.00 ns, 1.9000 us/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   3: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 5200.00 ns, 5.2000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   2: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   3: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   4: 1 op, 600.00 ns, 600.0000 ns/op
WorkloadActual   5: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   6: 1 op, 900.00 ns, 900.0000 ns/op
WorkloadActual   7: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   8: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   9: 1 op, 800.00 ns, 800.0000 ns/op
WorkloadActual  10: 1 op, 800.00 ns, 800.0000 ns/op

// AfterActualRun
WorkloadResult   1: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   2: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   3: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   4: 1 op, 300.00 ns, 300.0000 ns/op
WorkloadResult   5: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   6: 1 op, 600.00 ns, 600.0000 ns/op
WorkloadResult   7: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   8: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   9: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadResult  10: 1 op, 500.00 ns, 500.0000 ns/op
GC:  0 0 0 0 0

// AfterAll

Mean = 280.0000 ns, StdErr = 59.2546 ns (21.16%); N = 10, StdDev = 187.3796 ns
Min = 100.0000 ns, Q1 = 100.0000 ns, Median = 200.0000 ns, Q3 = 500.0000 ns, Max = 600.0000 ns
IQR = 400.0000 ns, LowerFence = -500.0000 ns, UpperFence = 1,100.0000 ns
ConfidenceInterval = [-3.2912 ns; 563.2912 ns] (CI 99.9%), Margin = 283.2912 ns (101.18% of Mean)
Skewness = 0.53, Kurtosis = 1.5, MValue = 3

// **************************
// Benchmark: ArrayAccessMethods.For: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "19d0fa58-37fa-41b8-807c-3b2bf9a4346c.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.For" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\19d0fa58-37fa-41b8-807c-3b2bf9a4346c\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-ZPSBWP(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 451100.00 ns, 451.1000 us/op
WorkloadJitting  1: 1 op, 419300.00 ns, 419.3000 us/op

OverheadWarmup   1: 1 op, 3200.00 ns, 3.2000 us/op
OverheadWarmup   2: 1 op, 1700.00 ns, 1.7000 us/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   7: 1 op, 300.00 ns, 300.0000 ns/op

OverheadActual   1: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   5: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual   6: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual   9: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  10: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  11: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  12: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 300.00 ns, 300.0000 ns/op

WorkloadWarmup   1: 1 op, 4200.00 ns, 4.2000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 600.00 ns, 600.0000 ns/op
WorkloadActual   2: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   3: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   4: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   5: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   6: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   7: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   8: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   9: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual  10: 1 op, 800.00 ns, 800.0000 ns/op

// AfterActualRun
WorkloadResult   1: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   2: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   3: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   4: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   5: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   6: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   7: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   8: 1 op, 200.00 ns, 200.0000 ns/op
GC:  0 0 0 0 0

// AfterAll

Mean = 175.0000 ns, StdErr = 16.3663 ns (9.35%); N = 8, StdDev = 46.2910 ns
Min = 100.0000 ns, Q1 = 150.0000 ns, Median = 200.0000 ns, Q3 = 200.0000 ns, Max = 200.0000 ns
IQR = 50.0000 ns, LowerFence = 75.0000 ns, UpperFence = 275.0000 ns
ConfidenceInterval = [86.4927 ns; 263.5073 ns] (CI 99.9%), Margin = 88.5073 ns (50.58% of Mean)
Skewness = -0.95, Kurtosis = 1.79, MValue = 2.67

// **************************
// Benchmark: ArrayAccessMethods.ForEach: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "19d0fa58-37fa-41b8-807c-3b2bf9a4346c.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForEach" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 2 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\19d0fa58-37fa-41b8-807c-3b2bf9a4346c\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-BOZQBG(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 409200.00 ns, 409.2000 us/op
WorkloadJitting  1: 1 op, 421800.00 ns, 421.8000 us/op

OverheadWarmup   1: 1 op, 6400.00 ns, 6.4000 us/op
OverheadWarmup   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   3: 1 op, 700.00 ns, 700.0000 ns/op
OverheadWarmup   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   5: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   6: 1 op, 400.00 ns, 400.0000 ns/op

OverheadActual   1: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   3: 1 op, 700.00 ns, 700.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 2100.00 ns, 2.1000 us/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 0.00 ns, 0.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  10: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  11: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  12: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  13: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  14: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  15: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  16: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  17: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  20: 1 op, 400.00 ns, 400.0000 ns/op

WorkloadWarmup   1: 1 op, 3800.00 ns, 3.8000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   2: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   3: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   4: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   5: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual   6: 1 op, 700.00 ns, 700.0000 ns/op
WorkloadActual   7: 1 op, 400.00 ns, 400.0000 ns/op
WorkloadActual   8: 1 op, 2100.00 ns, 2.1000 us/op
WorkloadActual   9: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadActual  10: 1 op, 500.00 ns, 500.0000 ns/op

// AfterActualRun
WorkloadResult   1: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   2: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   3: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   4: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   5: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   6: 1 op, 100.00 ns, 100.0000 ns/op
WorkloadResult   7: 1 op, 200.00 ns, 200.0000 ns/op
WorkloadResult   8: 1 op, 200.00 ns, 200.0000 ns/op
GC:  0 0 0 0 0

// AfterAll

Mean = 162.5000 ns, StdErr = 18.2981 ns (11.26%); N = 8, StdDev = 51.7549 ns
Min = 100.0000 ns, Q1 = 100.0000 ns, Median = 200.0000 ns, Q3 = 200.0000 ns, Max = 200.0000 ns
IQR = 100.0000 ns, LowerFence = -50.0000 ns, UpperFence = 350.0000 ns
ConfidenceInterval = [63.5459 ns; 261.4541 ns] (CI 99.9%), Margin = 98.9541 ns (60.89% of Mean)
Skewness = -0.42, Kurtosis = 0.97, MValue = 3.2

// **************************
// Benchmark: ArrayAccessMethods.LinqAggregate: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "19d0fa58-37fa-41b8-807c-3b2bf9a4346c.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAggregate" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 3 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\19d0fa58-37fa-41b8-807c-3b2bf9a4346c\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-NNWIZH(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 431600.00 ns, 431.6000 us/op
WorkloadJitting  1: 1 op, 1324500.00 ns, 1.3245 ms/op

OverheadWarmup   1: 1 op, 3900.00 ns, 3.9000 us/op
OverheadWarmup   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   3: 1 op, 100.00 ns, 100.0000 ns/op
OverheadWarmup   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   7: 1 op, 400.00 ns, 400.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  14: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  15: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual  16: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  17: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  18: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 400.00 ns, 400.0000 ns/op

WorkloadWarmup   1: 1 op, 9100.00 ns, 9.1000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 3500.00 ns, 3.5000 us/op
WorkloadActual   2: 1 op, 6000.00 ns, 6.0000 us/op
WorkloadActual   3: 1 op, 6300.00 ns, 6.3000 us/op
WorkloadActual   4: 1 op, 6400.00 ns, 6.4000 us/op
WorkloadActual   5: 1 op, 4400.00 ns, 4.4000 us/op
WorkloadActual   6: 1 op, 3600.00 ns, 3.6000 us/op
WorkloadActual   7: 1 op, 2700.00 ns, 2.7000 us/op
WorkloadActual   8: 1 op, 2900.00 ns, 2.9000 us/op
WorkloadActual   9: 1 op, 5800.00 ns, 5.8000 us/op
WorkloadActual  10: 1 op, 3100.00 ns, 3.1000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 3200.00 ns, 3.2000 us/op
WorkloadResult   2: 1 op, 5700.00 ns, 5.7000 us/op
WorkloadResult   3: 1 op, 6000.00 ns, 6.0000 us/op
WorkloadResult   4: 1 op, 6100.00 ns, 6.1000 us/op
WorkloadResult   5: 1 op, 4100.00 ns, 4.1000 us/op
WorkloadResult   6: 1 op, 3300.00 ns, 3.3000 us/op
WorkloadResult   7: 1 op, 2400.00 ns, 2.4000 us/op
WorkloadResult   8: 1 op, 2600.00 ns, 2.6000 us/op
WorkloadResult   9: 1 op, 5500.00 ns, 5.5000 us/op
WorkloadResult  10: 1 op, 2800.00 ns, 2.8000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 4.1700 us, StdErr = 0.4756 us (11.41%); N = 10, StdDev = 1.5041 us
Min = 2.4000 us, Q1 = 2.8000 us, Median = 3.7000 us, Q3 = 5.7000 us, Max = 6.1000 us
IQR = 2.9000 us, LowerFence = -1.5500 us, UpperFence = 10.0500 us
ConfidenceInterval = [1.8960 us; 6.4440 us] (CI 99.9%), Margin = 2.2740 us (54.53% of Mean)
Skewness = 0.17, Kurtosis = 1.07, MValue = 3.2

// **************************
// Benchmark: ArrayAccessMethods.LinqSum: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "19d0fa58-37fa-41b8-807c-3b2bf9a4346c.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqSum" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 4 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\19d0fa58-37fa-41b8-807c-3b2bf9a4346c\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-YBOTBZ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 450100.00 ns, 450.1000 us/op
WorkloadJitting  1: 1 op, 1293800.00 ns, 1.2938 ms/op

OverheadWarmup   1: 1 op, 3500.00 ns, 3.5000 us/op
OverheadWarmup   2: 1 op, 100.00 ns, 100.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 1800.00 ns, 1.8000 us/op
OverheadWarmup   5: 1 op, 1800.00 ns, 1.8000 us/op
OverheadWarmup   6: 1 op, 100.00 ns, 100.0000 ns/op
OverheadWarmup   7: 1 op, 400.00 ns, 400.0000 ns/op

OverheadActual   1: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   3: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   4: 1 op, 800.00 ns, 800.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   7: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual  12: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  17: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual  20: 1 op, 300.00 ns, 300.0000 ns/op

WorkloadWarmup   1: 1 op, 9200.00 ns, 9.2000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 6000.00 ns, 6.0000 us/op
WorkloadActual   2: 1 op, 6800.00 ns, 6.8000 us/op
WorkloadActual   3: 1 op, 2800.00 ns, 2.8000 us/op
WorkloadActual   4: 1 op, 2600.00 ns, 2.6000 us/op
WorkloadActual   5: 1 op, 6900.00 ns, 6.9000 us/op
WorkloadActual   6: 1 op, 6200.00 ns, 6.2000 us/op
WorkloadActual   7: 1 op, 6800.00 ns, 6.8000 us/op
WorkloadActual   8: 1 op, 7000.00 ns, 7.0000 us/op
WorkloadActual   9: 1 op, 7200.00 ns, 7.2000 us/op
WorkloadActual  10: 1 op, 4900.00 ns, 4.9000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 5700.00 ns, 5.7000 us/op
WorkloadResult   2: 1 op, 6500.00 ns, 6.5000 us/op
WorkloadResult   3: 1 op, 2500.00 ns, 2.5000 us/op
WorkloadResult   4: 1 op, 2300.00 ns, 2.3000 us/op
WorkloadResult   5: 1 op, 6600.00 ns, 6.6000 us/op
WorkloadResult   6: 1 op, 5900.00 ns, 5.9000 us/op
WorkloadResult   7: 1 op, 6500.00 ns, 6.5000 us/op
WorkloadResult   8: 1 op, 6700.00 ns, 6.7000 us/op
WorkloadResult   9: 1 op, 6900.00 ns, 6.9000 us/op
WorkloadResult  10: 1 op, 4600.00 ns, 4.6000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 5.4200 us, StdErr = 0.5456 us (10.07%); N = 10, StdDev = 1.7255 us
Min = 2.3000 us, Q1 = 4.6000 us, Median = 6.2000 us, Q3 = 6.6000 us, Max = 6.9000 us
IQR = 2.0000 us, LowerFence = 1.6000 us, UpperFence = 9.6000 us
ConfidenceInterval = [2.8113 us; 8.0287 us] (CI 99.9%), Margin = 2.6087 us (48.13% of Mean)
Skewness = -0.9, Kurtosis = 2.03, MValue = 2.67

Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.csv
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report-github.md
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.html

// * Detailed results *
ArrayAccessMethods.ForCacheArray: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 280.0000 ns, StdErr = 59.2546 ns (21.16%); N = 10, StdDev = 187.3796 ns
Min = 100.0000 ns, Q1 = 100.0000 ns, Median = 200.0000 ns, Q3 = 500.0000 ns, Max = 600.0000 ns
IQR = 400.0000 ns, LowerFence = -500.0000 ns, UpperFence = 1,100.0000 ns
ConfidenceInterval = [-3.2912 ns; 563.2912 ns] (CI 99.9%), Margin = 283.2912 ns (101.18% of Mean)
Skewness = 0.53, Kurtosis = 1.5, MValue = 3
-------------------- Histogram --------------------
[ 73.898 ns ; 226.102 ns) | @@@@@@
[226.102 ns ; 376.102 ns) | @
[376.102 ns ; 473.898 ns) | 
[473.898 ns ; 626.102 ns) | @@@
---------------------------------------------------

ArrayAccessMethods.For: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 175.0000 ns, StdErr = 16.3663 ns (9.35%); N = 8, StdDev = 46.2910 ns
Min = 100.0000 ns, Q1 = 150.0000 ns, Median = 200.0000 ns, Q3 = 200.0000 ns, Max = 200.0000 ns
IQR = 50.0000 ns, LowerFence = 75.0000 ns, UpperFence = 275.0000 ns
ConfidenceInterval = [86.4927 ns; 263.5073 ns] (CI 99.9%), Margin = 88.5073 ns (50.58% of Mean)
Skewness = -0.95, Kurtosis = 1.79, MValue = 2.67
-------------------- Histogram --------------------
[ 79.748 ns ; 120.252 ns) | @@
[120.252 ns ; 179.748 ns) | 
[179.748 ns ; 220.252 ns) | @@@@@@
---------------------------------------------------

ArrayAccessMethods.ForEach: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 162.5000 ns, StdErr = 18.2981 ns (11.26%); N = 8, StdDev = 51.7549 ns
Min = 100.0000 ns, Q1 = 100.0000 ns, Median = 200.0000 ns, Q3 = 200.0000 ns, Max = 200.0000 ns
IQR = 100.0000 ns, LowerFence = -50.0000 ns, UpperFence = 350.0000 ns
ConfidenceInterval = [63.5459 ns; 261.4541 ns] (CI 99.9%), Margin = 98.9541 ns (60.89% of Mean)
Skewness = -0.42, Kurtosis = 0.97, MValue = 3.2
-------------------- Histogram --------------------
[ 77.357 ns ; 122.643 ns) | @@@
[122.643 ns ; 177.357 ns) | 
[177.357 ns ; 222.643 ns) | @@@@@
---------------------------------------------------

ArrayAccessMethods.LinqAggregate: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 4.1700 us, StdErr = 0.4756 us (11.41%); N = 10, StdDev = 1.5041 us
Min = 2.4000 us, Q1 = 2.8000 us, Median = 3.7000 us, Q3 = 5.7000 us, Max = 6.1000 us
IQR = 2.9000 us, LowerFence = -1.5500 us, UpperFence = 10.0500 us
ConfidenceInterval = [1.8960 us; 6.4440 us] (CI 99.9%), Margin = 2.2740 us (54.53% of Mean)
Skewness = 0.17, Kurtosis = 1.07, MValue = 3.2
-------------------- Histogram --------------------
[2.239 us ; 3.461 us) | @@@@@
[3.461 us ; 4.711 us) | @
[4.711 us ; 6.411 us) | @@@@
---------------------------------------------------

ArrayAccessMethods.LinqSum: Job-INUAWC(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 5.4200 us, StdErr = 0.5456 us (10.07%); N = 10, StdDev = 1.7255 us
Min = 2.3000 us, Q1 = 4.6000 us, Median = 6.2000 us, Q3 = 6.6000 us, Max = 6.9000 us
IQR = 2.0000 us, LowerFence = 1.6000 us, UpperFence = 9.6000 us
ConfidenceInterval = [2.8113 us; 8.0287 us] (CI 99.9%), Margin = 2.6087 us (48.13% of Mean)
Skewness = -0.9, Kurtosis = 2.03, MValue = 2.67
-------------------- Histogram --------------------
[1.599 us ; 3.101 us) | @@
[3.101 us ; 3.899 us) | 
[3.899 us ; 5.301 us) | @
[5.301 us ; 7.001 us) | @@@@@@
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)
Intel Core i7-5820K CPU 3.30GHz (Broadwell), 1 CPU, 12 logical and 6 physical cores
.NET Core SDK=2.2.105
  [Host]     : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
  Job-INUAWC : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT

Server=True  InvocationCount=1  IterationCount=10  
LaunchCount=1  RunStrategy=Throughput  UnrollFactor=1  
WarmupCount=1  

|        Method |       Mean |       Error |      StdDev |     Median | Ratio | RatioSD |
|-------------- |-----------:|------------:|------------:|-----------:|------:|--------:|
| ForCacheArray |   280.0 ns |   283.29 ns |   187.38 ns |   200.0 ns |  1.00 |    0.00 |
|           For |   175.0 ns |    88.51 ns |    46.29 ns |   200.0 ns |  1.17 |    0.74 |
|       ForEach |   162.5 ns |    98.95 ns |    51.75 ns |   200.0 ns |  1.04 |    0.66 |
| LinqAggregate | 4,170.0 ns | 2,273.99 ns | 1,504.11 ns | 3,700.0 ns | 21.99 |   15.54 |
|       LinqSum | 5,420.0 ns | 2,608.70 ns | 1,725.50 ns | 6,200.0 ns | 30.75 |   24.13 |

// * Warnings *
MinIterationTime
  ArrayAccessMethods.ForCacheArray: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 400.0000 ns which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqAggregate: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 2.7000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqSum: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 2.6000 us which is very small. It's recommended to increase it.

// * Hints *
Outliers
  ArrayAccessMethods.For: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1     -> 2 outliers were removed, 4 outliers were detected (400.00 ns, 400.00 ns, 600.00 ns, 800.00 ns)
  ArrayAccessMethods.ForEach: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> 2 outliers were removed (700.00 ns, 2.10 us)

// * Legends *
  Mean    : Arithmetic mean of all measurements
  Error   : Half of 99.9% confidence interval
  StdDev  : Standard deviation of all measurements
  Median  : Value separating the higher half of all measurements (50th percentile)
  Ratio   : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])
  1 ns    : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:03 (3.84 sec), executed benchmarks: 5

Global total time: 00:00:09 (9.11 sec), executed benchmarks: 5
// * Artifacts cleanup *
