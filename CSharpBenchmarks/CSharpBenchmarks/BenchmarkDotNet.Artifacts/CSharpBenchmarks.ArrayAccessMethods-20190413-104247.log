// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 14 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a
// command took 2s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a
// command took 3,35s and exited with 0
// ***** Done, took 00:00:05 (5.55 sec)   *****
// Found 14 benchmarks:
//   ArrayAccessMethods.ForCacheArray: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.ForCacheArray2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.For: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.For2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.ForEach: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.ForEach2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.LinqAggregate: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.LinqAggregate2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.LinqSum: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.LinqSum2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.LinqAll: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.LinqAll2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.LinqAny: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
//   ArrayAccessMethods.LinqAny2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ArrayAccessMethods.ForCacheArray: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForCacheArray" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 0 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-PBTTVQ(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 178
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.ForCacheArray2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForCacheArray2" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-AZLVFQ(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 824
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.For: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.For" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 2 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-SPNXPA(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_2.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 1470
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.For2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.For2" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 3 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-UWPOGC(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_3.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 2116
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.ForEach: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForEach" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 4 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-MBGXUV(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_4.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 2762
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.ForEach2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForEach2" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 5 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-JOONRS(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_5.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 3408
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.LinqAggregate: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAggregate" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 6 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-VBTUZD(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_6.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 4054
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.LinqAggregate2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAggregate2" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 7 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-YCRUSZ(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_7.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 4700
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.LinqSum: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqSum" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 8 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-JRTIEQ(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_8.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 5346
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.LinqSum2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqSum2" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 9 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-CNYOEO(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_9.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 5992
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.LinqAll: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAll" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 10 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-TYWWMI(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_10.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 6638
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.LinqAll2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAll2" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 11 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-NBINRI(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_11.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 7284
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.LinqAny: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAny" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 12 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-DMCLEY(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_12.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 7930
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ArrayAccessMethods.LinqAny2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "d5c80c34-0c47-4287-8b11-369876f92a0a.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAny2" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 13 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-YAJCJB(Jit=RyuJit, Platform=X64, Server=True)


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at CSharpBenchmarks.ArrayAccessMethods.Setup() in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\Benchmarks\ArrayAccessMethods.cs:line 22
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_13.Run(IHost host, String benchmarkName) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 8576
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\d5c80c34-0c47-4287-8b11-369876f92a0a\d5c80c34-0c47-4287-8b11-369876f92a0a.notcs:line 61
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.csv
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report-github.md
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.html
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.txt

// * Detailed results *
ArrayAccessMethods.ForCacheArray: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.ForCacheArray2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.For: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.For2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.ForEach: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.ForEach2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.LinqAggregate: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.LinqAggregate2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.LinqSum: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.LinqSum2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.LinqAll: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.LinqAll2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.LinqAny: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

ArrayAccessMethods.LinqAny2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)
Intel Core i7-5820K CPU 3.30GHz (Broadwell), 1 CPU, 12 logical and 6 physical cores
.NET Core SDK=2.2.105
  [Host] : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT

Jit=RyuJit  Platform=X64  Server=True  

|         Method | Mean | Error | Ratio | RatioSD |
|--------------- |-----:|------:|------:|--------:|
|  ForCacheArray |   NA |    NA |     ? |       ? |
| ForCacheArray2 |   NA |    NA |     ? |       ? |
|            For |   NA |    NA |     ? |       ? |
|           For2 |   NA |    NA |     ? |       ? |
|        ForEach |   NA |    NA |     ? |       ? |
|       ForEach2 |   NA |    NA |     ? |       ? |
|  LinqAggregate |   NA |    NA |     ? |       ? |
| LinqAggregate2 |   NA |    NA |     ? |       ? |
|        LinqSum |   NA |    NA |     ? |       ? |
|       LinqSum2 |   NA |    NA |     ? |       ? |
|        LinqAll |   NA |    NA |     ? |       ? |
|       LinqAll2 |   NA |    NA |     ? |       ? |
|        LinqAny |   NA |    NA |     ? |       ? |
|       LinqAny2 |   NA |    NA |     ? |       ? |

Benchmarks with issues:
  ArrayAccessMethods.ForCacheArray: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.ForCacheArray2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.For: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.For2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.ForEach: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.ForEach2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.LinqAggregate: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.LinqAggregate2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.LinqSum: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.LinqSum2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.LinqAll: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.LinqAll2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.LinqAny: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)
  ArrayAccessMethods.LinqAny2: Job-BRRWVX(Jit=RyuJit, Platform=X64, Server=True)

// * Warnings *
Environment
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean    : Arithmetic mean of all measurements
  Error   : Half of 99.9% confidence interval
  Ratio   : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])
  1 ns    : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:03 (3.96 sec), executed benchmarks: 14

Global total time: 00:00:09 (9.52 sec), executed benchmarks: 14
// * Artifacts cleanup *
