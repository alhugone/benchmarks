// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\Git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\2c4cf334-9a94-4b31-8cc6-888fa6207100
// command took 2,09s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\Git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\2c4cf334-9a94-4b31-8cc6-888fa6207100
// command took 3,06s and exited with 0
// ***** Done, took 00:00:05 (5.17 sec)   *****
// Found 2 benchmarks:
//   ReflectionGetAndSetMethods.FuncAndAction: Job-XZCOKH(Jit=RyuJit, Platform=X64, Server=True)
//   ReflectionGetAndSetMethods.Reflection: Job-XZCOKH(Jit=RyuJit, Platform=X64, Server=True)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ReflectionGetAndSetMethods.FuncAndAction: Job-XZCOKH(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "2c4cf334-9a94-4b31-8cc6-888fa6207100.dll" --benchmarkName "CSharpBenchmarks.ReflectionGetAndSetMethods.FuncAndAction" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 0 in E:\Git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\2c4cf334-9a94-4b31-8cc6-888fa6207100\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-DQXOXE(Jit=RyuJit, Platform=X64, Server=True)

OverheadJitting  1: 1 op, 529300.00 ns, 529.3000 us/op
WorkloadJitting  1: 1 op, 28661900.00 ns, 28.6619 ms/op

OverheadJitting  2: 16 op, 988600.00 ns, 61.7875 us/op
WorkloadJitting  2: 16 op, 446280100.00 ns, 27.8925 ms/op

WorkloadPilot    1: 16 op, 445130900.00 ns, 27.8207 ms/op
WorkloadPilot    2: 32 op, 890236800.00 ns, 27.8199 ms/op

OverheadWarmup   1: 32 op, 4600.00 ns, 143.7500 ns/op
OverheadWarmup   2: 32 op, 700.00 ns, 21.8750 ns/op
OverheadWarmup   3: 32 op, 2800.00 ns, 87.5000 ns/op
OverheadWarmup   4: 32 op, 1500.00 ns, 46.8750 ns/op
OverheadWarmup   5: 32 op, 700.00 ns, 21.8750 ns/op
OverheadWarmup   6: 32 op, 1500.00 ns, 46.8750 ns/op
OverheadWarmup   7: 32 op, 600.00 ns, 18.7500 ns/op

OverheadActual   1: 32 op, 2300.00 ns, 71.8750 ns/op
OverheadActual   2: 32 op, 2500.00 ns, 78.1250 ns/op
OverheadActual   3: 32 op, 600.00 ns, 18.7500 ns/op
OverheadActual   4: 32 op, 700.00 ns, 21.8750 ns/op
OverheadActual   5: 32 op, 900.00 ns, 28.1250 ns/op
OverheadActual   6: 32 op, 800.00 ns, 25.0000 ns/op
OverheadActual   7: 32 op, 700.00 ns, 21.8750 ns/op
OverheadActual   8: 32 op, 700.00 ns, 21.8750 ns/op
OverheadActual   9: 32 op, 2900.00 ns, 90.6250 ns/op
OverheadActual  10: 32 op, 900.00 ns, 28.1250 ns/op
OverheadActual  11: 32 op, 2600.00 ns, 81.2500 ns/op
OverheadActual  12: 32 op, 2400.00 ns, 75.0000 ns/op
OverheadActual  13: 32 op, 2400.00 ns, 75.0000 ns/op
OverheadActual  14: 32 op, 700.00 ns, 21.8750 ns/op
OverheadActual  15: 32 op, 2300.00 ns, 71.8750 ns/op
OverheadActual  16: 32 op, 1000.00 ns, 31.2500 ns/op
OverheadActual  17: 32 op, 600.00 ns, 18.7500 ns/op
OverheadActual  18: 32 op, 700.00 ns, 21.8750 ns/op
OverheadActual  19: 32 op, 600.00 ns, 18.7500 ns/op
OverheadActual  20: 32 op, 700.00 ns, 21.8750 ns/op

WorkloadWarmup   1: 32 op, 898112900.00 ns, 28.0660 ms/op
WorkloadWarmup   2: 32 op, 917437700.00 ns, 28.6699 ms/op
WorkloadWarmup   3: 32 op, 894839600.00 ns, 27.9637 ms/op
WorkloadWarmup   4: 32 op, 900553200.00 ns, 28.1423 ms/op
WorkloadWarmup   5: 32 op, 892300500.00 ns, 27.8844 ms/op
WorkloadWarmup   6: 32 op, 895265000.00 ns, 27.9770 ms/op

// BeforeActualRun
WorkloadActual   1: 32 op, 892703200.00 ns, 27.8970 ms/op
WorkloadActual   2: 32 op, 891708100.00 ns, 27.8659 ms/op
WorkloadActual   3: 32 op, 889578300.00 ns, 27.7993 ms/op
WorkloadActual   4: 32 op, 888303900.00 ns, 27.7595 ms/op
WorkloadActual   5: 32 op, 892144400.00 ns, 27.8795 ms/op
WorkloadActual   6: 32 op, 886560400.00 ns, 27.7050 ms/op
WorkloadActual   7: 32 op, 887053800.00 ns, 27.7204 ms/op
WorkloadActual   8: 32 op, 888641900.00 ns, 27.7701 ms/op
WorkloadActual   9: 32 op, 886864900.00 ns, 27.7145 ms/op
WorkloadActual  10: 32 op, 887812200.00 ns, 27.7441 ms/op
WorkloadActual  11: 32 op, 886469500.00 ns, 27.7022 ms/op
WorkloadActual  12: 32 op, 888173000.00 ns, 27.7554 ms/op
WorkloadActual  13: 32 op, 887996600.00 ns, 27.7499 ms/op
WorkloadActual  14: 32 op, 887425600.00 ns, 27.7321 ms/op
WorkloadActual  15: 32 op, 886313500.00 ns, 27.6973 ms/op

// AfterActualRun
WorkloadResult   1: 32 op, 892702350.00 ns, 27.8969 ms/op
WorkloadResult   2: 32 op, 891707250.00 ns, 27.8659 ms/op
WorkloadResult   3: 32 op, 889577450.00 ns, 27.7993 ms/op
WorkloadResult   4: 32 op, 888303050.00 ns, 27.7595 ms/op
WorkloadResult   5: 32 op, 892143550.00 ns, 27.8795 ms/op
WorkloadResult   6: 32 op, 886559550.00 ns, 27.7050 ms/op
WorkloadResult   7: 32 op, 887052950.00 ns, 27.7204 ms/op
WorkloadResult   8: 32 op, 888641050.00 ns, 27.7700 ms/op
WorkloadResult   9: 32 op, 886864050.00 ns, 27.7145 ms/op
WorkloadResult  10: 32 op, 887811350.00 ns, 27.7441 ms/op
WorkloadResult  11: 32 op, 886468650.00 ns, 27.7021 ms/op
WorkloadResult  12: 32 op, 888172150.00 ns, 27.7554 ms/op
WorkloadResult  13: 32 op, 887995750.00 ns, 27.7499 ms/op
WorkloadResult  14: 32 op, 887424750.00 ns, 27.7320 ms/op
WorkloadResult  15: 32 op, 886312650.00 ns, 27.6973 ms/op
GC:  0 0 0 0 0

// AfterAll

Mean = 27.7661 ms, StdErr = 0.0170 ms (0.06%); N = 15, StdDev = 0.0657 ms
Min = 27.6973 ms, Q1 = 27.7145 ms, Median = 27.7499 ms, Q3 = 27.7993 ms, Max = 27.8969 ms
IQR = 0.0848 ms, LowerFence = 27.5873 ms, UpperFence = 27.9265 ms
ConfidenceInterval = [27.6959 ms; 27.8364 ms] (CI 99.9%), Margin = 0.0702 ms (0.25% of Mean)
Skewness = 0.85, Kurtosis = 2.24, MValue = 2

// **************************
// Benchmark: ReflectionGetAndSetMethods.Reflection: Job-XZCOKH(Jit=RyuJit, Platform=X64, Server=True)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "2c4cf334-9a94-4b31-8cc6-888fa6207100.dll" --benchmarkName "CSharpBenchmarks.ReflectionGetAndSetMethods.Reflection" --job "Jit=RyuJit, Platform=X64, Server=True" --benchmarkId 1 in E:\Git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\2c4cf334-9a94-4b31-8cc6-888fa6207100\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-IPEKUA(Jit=RyuJit, Platform=X64, Server=True)

OverheadJitting  1: 1 op, 533300.00 ns, 533.3000 us/op
WorkloadJitting  1: 1 op, 1070370900.00 ns, 1.0704 s/op

WorkloadWarmup   1: 1 op, 1065131800.00 ns, 1.0651 s/op
WorkloadWarmup   2: 1 op, 1068569900.00 ns, 1.0686 s/op
WorkloadWarmup   3: 1 op, 1069955200.00 ns, 1.0700 s/op
WorkloadWarmup   4: 1 op, 1064887500.00 ns, 1.0649 s/op
WorkloadWarmup   5: 1 op, 1070544400.00 ns, 1.0705 s/op
WorkloadWarmup   6: 1 op, 1073677800.00 ns, 1.0737 s/op
WorkloadWarmup   7: 1 op, 1067656800.00 ns, 1.0677 s/op

// BeforeActualRun
WorkloadActual   1: 1 op, 1095313900.00 ns, 1.0953 s/op
WorkloadActual   2: 1 op, 1093140200.00 ns, 1.0931 s/op
WorkloadActual   3: 1 op, 1123636600.00 ns, 1.1236 s/op
WorkloadActual   4: 1 op, 1095116300.00 ns, 1.0951 s/op
WorkloadActual   5: 1 op, 1080830300.00 ns, 1.0808 s/op
WorkloadActual   6: 1 op, 1070910700.00 ns, 1.0709 s/op
WorkloadActual   7: 1 op, 1066925400.00 ns, 1.0669 s/op
WorkloadActual   8: 1 op, 1064303800.00 ns, 1.0643 s/op
WorkloadActual   9: 1 op, 1070996200.00 ns, 1.0710 s/op
WorkloadActual  10: 1 op, 1067609300.00 ns, 1.0676 s/op
WorkloadActual  11: 1 op, 1067817400.00 ns, 1.0678 s/op
WorkloadActual  12: 1 op, 1066342000.00 ns, 1.0663 s/op
WorkloadActual  13: 1 op, 1071281100.00 ns, 1.0713 s/op
WorkloadActual  14: 1 op, 1065352400.00 ns, 1.0654 s/op
WorkloadActual  15: 1 op, 1066373400.00 ns, 1.0664 s/op

// AfterActualRun
WorkloadResult   1: 1 op, 1095313900.00 ns, 1.0953 s/op
WorkloadResult   2: 1 op, 1093140200.00 ns, 1.0931 s/op
WorkloadResult   3: 1 op, 1123636600.00 ns, 1.1236 s/op
WorkloadResult   4: 1 op, 1095116300.00 ns, 1.0951 s/op
WorkloadResult   5: 1 op, 1080830300.00 ns, 1.0808 s/op
WorkloadResult   6: 1 op, 1070910700.00 ns, 1.0709 s/op
WorkloadResult   7: 1 op, 1066925400.00 ns, 1.0669 s/op
WorkloadResult   8: 1 op, 1064303800.00 ns, 1.0643 s/op
WorkloadResult   9: 1 op, 1070996200.00 ns, 1.0710 s/op
WorkloadResult  10: 1 op, 1067609300.00 ns, 1.0676 s/op
WorkloadResult  11: 1 op, 1067817400.00 ns, 1.0678 s/op
WorkloadResult  12: 1 op, 1066342000.00 ns, 1.0663 s/op
WorkloadResult  13: 1 op, 1071281100.00 ns, 1.0713 s/op
WorkloadResult  14: 1 op, 1065352400.00 ns, 1.0654 s/op
WorkloadResult  15: 1 op, 1066373400.00 ns, 1.0664 s/op
GC:  0 0 0 0 0

// AfterAll

Mean = 1.0777 s, StdErr = 0.0044 s (0.41%); N = 15, StdDev = 0.0169 s
Min = 1.0643 s, Q1 = 1.0664 s, Median = 1.0709 s, Q3 = 1.0931 s, Max = 1.1236 s
IQR = 0.0268 s, LowerFence = 1.0262 s, UpperFence = 1.1333 s
ConfidenceInterval = [1.0596 s; 1.0958 s] (CI 99.9%), Margin = 0.0181 s (1.68% of Mean)
Skewness = 1.37, Kurtosis = 3.91, MValue = 2

Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ReflectionGetAndSetMethods-report.csv
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ReflectionGetAndSetMethods-report-github.md
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ReflectionGetAndSetMethods-report.html

// * Detailed results *
ReflectionGetAndSetMethods.FuncAndAction: Job-XZCOKH(Jit=RyuJit, Platform=X64, Server=True)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 27.7661 ms, StdErr = 0.0170 ms (0.06%); N = 15, StdDev = 0.0657 ms
Min = 27.6973 ms, Q1 = 27.7145 ms, Median = 27.7499 ms, Q3 = 27.7993 ms, Max = 27.8969 ms
IQR = 0.0848 ms, LowerFence = 27.5873 ms, UpperFence = 27.9265 ms
ConfidenceInterval = [27.6959 ms; 27.8364 ms] (CI 99.9%), Margin = 0.0702 ms (0.25% of Mean)
Skewness = 0.85, Kurtosis = 2.24, MValue = 2
-------------------- Histogram --------------------
[27.674 ms ; 27.920 ms) | @@@@@@@@@@@@@@@
---------------------------------------------------

ReflectionGetAndSetMethods.Reflection: Job-XZCOKH(Jit=RyuJit, Platform=X64, Server=True)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 1.0777 s, StdErr = 0.0044 s (0.41%); N = 15, StdDev = 0.0169 s
Min = 1.0643 s, Q1 = 1.0664 s, Median = 1.0709 s, Q3 = 1.0931 s, Max = 1.1236 s
IQR = 0.0268 s, LowerFence = 1.0262 s, UpperFence = 1.1333 s
ConfidenceInterval = [1.0596 s; 1.0958 s] (CI 99.9%), Margin = 0.0181 s (1.68% of Mean)
Skewness = 1.37, Kurtosis = 3.91, MValue = 2
-------------------- Histogram --------------------
[1.058 s ; 1.083 s) | @@@@@@@@@@@
[1.083 s ; 1.130 s) | @@@@
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)
Intel Core i7-5820K CPU 3.30GHz (Broadwell), 1 CPU, 12 logical and 6 physical cores
.NET Core SDK=2.2.105
  [Host]     : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
  Job-XZCOKH : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT

Jit=RyuJit  Platform=X64  Server=True  

|        Method |        Mean |      Error |     StdDev | Ratio | RatioSD |
|-------------- |------------:|-----------:|-----------:|------:|--------:|
| FuncAndAction |    27.77 ms |  0.0702 ms |  0.0657 ms |  1.00 |    0.00 |
|    Reflection | 1,077.73 ms | 18.0907 ms | 16.9220 ms | 38.81 |    0.56 |

// * Legends *
  Mean    : Arithmetic mean of all measurements
  Error   : Half of 99.9% confidence interval
  StdDev  : Standard deviation of all measurements
  Ratio   : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])
  1 ms    : 1 Millisecond (0.001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:46 (46.33 sec), executed benchmarks: 2

Global total time: 00:00:51 (51.5 sec), executed benchmarks: 2
// * Artifacts cleanup *
