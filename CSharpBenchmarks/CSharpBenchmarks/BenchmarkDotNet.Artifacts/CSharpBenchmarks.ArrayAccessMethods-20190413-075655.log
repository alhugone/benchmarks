// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 5 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\85ff9dab-d70c-40f7-ac3f-7c83f3589f19
// command took 2,01s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\85ff9dab-d70c-40f7-ac3f-7c83f3589f19
// command took 2,95s and exited with 0
// ***** Done, took 00:00:05 (5.1 sec)   *****
// Found 5 benchmarks:
//   ArrayAccessMethods.ForCacheArray: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.For: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.ForEach: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqAggregate: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqSum: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ArrayAccessMethods.ForCacheArray: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "85ff9dab-d70c-40f7-ac3f-7c83f3589f19.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForCacheArray" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 0 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\85ff9dab-d70c-40f7-ac3f-7c83f3589f19\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-DSHMVB(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 387000.00 ns, 387.0000 us/op
WorkloadJitting  1: 1 op, 368200.00 ns, 368.2000 us/op

OverheadWarmup   1: 1 op, 5500.00 ns, 5.5000 us/op
OverheadWarmup   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual  11: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual  14: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  17: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 36400.00 ns, 36.4000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 35300.00 ns, 35.3000 us/op
WorkloadActual   2: 1 op, 32500.00 ns, 32.5000 us/op
WorkloadActual   3: 1 op, 32500.00 ns, 32.5000 us/op
WorkloadActual   4: 1 op, 32600.00 ns, 32.6000 us/op
WorkloadActual   5: 1 op, 32400.00 ns, 32.4000 us/op
WorkloadActual   6: 1 op, 32000.00 ns, 32.0000 us/op
WorkloadActual   7: 1 op, 34200.00 ns, 34.2000 us/op
WorkloadActual   8: 1 op, 66700.00 ns, 66.7000 us/op
WorkloadActual   9: 1 op, 34600.00 ns, 34.6000 us/op
WorkloadActual  10: 1 op, 32600.00 ns, 32.6000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 35000.00 ns, 35.0000 us/op
WorkloadResult   2: 1 op, 32200.00 ns, 32.2000 us/op
WorkloadResult   3: 1 op, 32200.00 ns, 32.2000 us/op
WorkloadResult   4: 1 op, 32300.00 ns, 32.3000 us/op
WorkloadResult   5: 1 op, 32100.00 ns, 32.1000 us/op
WorkloadResult   6: 1 op, 31700.00 ns, 31.7000 us/op
WorkloadResult   7: 1 op, 33900.00 ns, 33.9000 us/op
WorkloadResult   8: 1 op, 34300.00 ns, 34.3000 us/op
WorkloadResult   9: 1 op, 32300.00 ns, 32.3000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 32.8889 us, StdErr = 0.3935 us (1.20%); N = 9, StdDev = 1.1805 us
Min = 31.7000 us, Q1 = 32.1500 us, Median = 32.3000 us, Q3 = 34.1000 us, Max = 35.0000 us
IQR = 1.9500 us, LowerFence = 29.2250 us, UpperFence = 37.0250 us
ConfidenceInterval = [30.9051 us; 34.8727 us] (CI 99.9%), Margin = 1.9838 us (6.03% of Mean)
Skewness = 0.68, Kurtosis = 1.6, MValue = 2.67

// **************************
// Benchmark: ArrayAccessMethods.For: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "85ff9dab-d70c-40f7-ac3f-7c83f3589f19.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.For" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\85ff9dab-d70c-40f7-ac3f-7c83f3589f19\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-NKCPFT(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 351100.00 ns, 351.1000 us/op
WorkloadJitting  1: 1 op, 392000.00 ns, 392.0000 us/op

OverheadWarmup   1: 1 op, 3500.00 ns, 3.5000 us/op
OverheadWarmup   2: 1 op, 100.00 ns, 100.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   7: 1 op, 300.00 ns, 300.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 1900.00 ns, 1.9000 us/op
OverheadActual  12: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  17: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  18: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  19: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  20: 1 op, 300.00 ns, 300.0000 ns/op

WorkloadWarmup   1: 1 op, 43300.00 ns, 43.3000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 45300.00 ns, 45.3000 us/op
WorkloadActual   2: 1 op, 41600.00 ns, 41.6000 us/op
WorkloadActual   3: 1 op, 36900.00 ns, 36.9000 us/op
WorkloadActual   4: 1 op, 45300.00 ns, 45.3000 us/op
WorkloadActual   5: 1 op, 36900.00 ns, 36.9000 us/op
WorkloadActual   6: 1 op, 41500.00 ns, 41.5000 us/op
WorkloadActual   7: 1 op, 38200.00 ns, 38.2000 us/op
WorkloadActual   8: 1 op, 42900.00 ns, 42.9000 us/op
WorkloadActual   9: 1 op, 41700.00 ns, 41.7000 us/op
WorkloadActual  10: 1 op, 40900.00 ns, 40.9000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 45000.00 ns, 45.0000 us/op
WorkloadResult   2: 1 op, 41300.00 ns, 41.3000 us/op
WorkloadResult   3: 1 op, 36600.00 ns, 36.6000 us/op
WorkloadResult   4: 1 op, 45000.00 ns, 45.0000 us/op
WorkloadResult   5: 1 op, 36600.00 ns, 36.6000 us/op
WorkloadResult   6: 1 op, 41200.00 ns, 41.2000 us/op
WorkloadResult   7: 1 op, 37900.00 ns, 37.9000 us/op
WorkloadResult   8: 1 op, 42600.00 ns, 42.6000 us/op
WorkloadResult   9: 1 op, 41400.00 ns, 41.4000 us/op
WorkloadResult  10: 1 op, 40600.00 ns, 40.6000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 40.8200 us, StdErr = 0.9604 us (2.35%); N = 10, StdDev = 3.0371 us
Min = 36.6000 us, Q1 = 37.9000 us, Median = 41.2500 us, Q3 = 42.6000 us, Max = 45.0000 us
IQR = 4.7000 us, LowerFence = 30.8500 us, UpperFence = 49.6500 us
ConfidenceInterval = [36.2283 us; 45.4117 us] (CI 99.9%), Margin = 4.5917 us (11.25% of Mean)
Skewness = -0.08, Kurtosis = 1.56, MValue = 3.2

// **************************
// Benchmark: ArrayAccessMethods.ForEach: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "85ff9dab-d70c-40f7-ac3f-7c83f3589f19.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForEach" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 2 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\85ff9dab-d70c-40f7-ac3f-7c83f3589f19\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-VFSIWE(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 361200.00 ns, 361.2000 us/op
WorkloadJitting  1: 1 op, 371900.00 ns, 371.9000 us/op

OverheadWarmup   1: 1 op, 3600.00 ns, 3.6000 us/op
OverheadWarmup   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   3: 1 op, 100.00 ns, 100.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   7: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   6: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 36500.00 ns, 36.5000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 37700.00 ns, 37.7000 us/op
WorkloadActual   2: 1 op, 32500.00 ns, 32.5000 us/op
WorkloadActual   3: 1 op, 32500.00 ns, 32.5000 us/op
WorkloadActual   4: 1 op, 36800.00 ns, 36.8000 us/op
WorkloadActual   5: 1 op, 32300.00 ns, 32.3000 us/op
WorkloadActual   6: 1 op, 36200.00 ns, 36.2000 us/op
WorkloadActual   7: 1 op, 33400.00 ns, 33.4000 us/op
WorkloadActual   8: 1 op, 34800.00 ns, 34.8000 us/op
WorkloadActual   9: 1 op, 32500.00 ns, 32.5000 us/op
WorkloadActual  10: 1 op, 32600.00 ns, 32.6000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 37500.00 ns, 37.5000 us/op
WorkloadResult   2: 1 op, 32300.00 ns, 32.3000 us/op
WorkloadResult   3: 1 op, 32300.00 ns, 32.3000 us/op
WorkloadResult   4: 1 op, 36600.00 ns, 36.6000 us/op
WorkloadResult   5: 1 op, 32100.00 ns, 32.1000 us/op
WorkloadResult   6: 1 op, 36000.00 ns, 36.0000 us/op
WorkloadResult   7: 1 op, 33200.00 ns, 33.2000 us/op
WorkloadResult   8: 1 op, 34600.00 ns, 34.6000 us/op
WorkloadResult   9: 1 op, 32300.00 ns, 32.3000 us/op
WorkloadResult  10: 1 op, 32400.00 ns, 32.4000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 33.9300 us, StdErr = 0.6566 us (1.94%); N = 10, StdDev = 2.0763 us
Min = 32.1000 us, Q1 = 32.3000 us, Median = 32.8000 us, Q3 = 36.0000 us, Max = 37.5000 us
IQR = 3.7000 us, LowerFence = 26.7500 us, UpperFence = 41.5500 us
ConfidenceInterval = [30.7909 us; 37.0691 us] (CI 99.9%), Margin = 3.1391 us (9.25% of Mean)
Skewness = 0.57, Kurtosis = 1.45, MValue = 2.67

// **************************
// Benchmark: ArrayAccessMethods.LinqAggregate: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "85ff9dab-d70c-40f7-ac3f-7c83f3589f19.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAggregate" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 3 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\85ff9dab-d70c-40f7-ac3f-7c83f3589f19\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-UXODAQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 345500.00 ns, 345.5000 us/op
WorkloadJitting  1: 1 op, 1591200.00 ns, 1.5912 ms/op

OverheadWarmup   1: 1 op, 6500.00 ns, 6.5000 us/op
OverheadWarmup   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  10: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  11: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  18: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 400.00 ns, 400.0000 ns/op

WorkloadWarmup   1: 1 op, 503100.00 ns, 503.1000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 482600.00 ns, 482.6000 us/op
WorkloadActual   2: 1 op, 488800.00 ns, 488.8000 us/op
WorkloadActual   3: 1 op, 502500.00 ns, 502.5000 us/op
WorkloadActual   4: 1 op, 486800.00 ns, 486.8000 us/op
WorkloadActual   5: 1 op, 493600.00 ns, 493.6000 us/op
WorkloadActual   6: 1 op, 490400.00 ns, 490.4000 us/op
WorkloadActual   7: 1 op, 491300.00 ns, 491.3000 us/op
WorkloadActual   8: 1 op, 502700.00 ns, 502.7000 us/op
WorkloadActual   9: 1 op, 515900.00 ns, 515.9000 us/op
WorkloadActual  10: 1 op, 487100.00 ns, 487.1000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 482300.00 ns, 482.3000 us/op
WorkloadResult   2: 1 op, 488500.00 ns, 488.5000 us/op
WorkloadResult   3: 1 op, 502200.00 ns, 502.2000 us/op
WorkloadResult   4: 1 op, 486500.00 ns, 486.5000 us/op
WorkloadResult   5: 1 op, 493300.00 ns, 493.3000 us/op
WorkloadResult   6: 1 op, 490100.00 ns, 490.1000 us/op
WorkloadResult   7: 1 op, 491000.00 ns, 491.0000 us/op
WorkloadResult   8: 1 op, 502400.00 ns, 502.4000 us/op
WorkloadResult   9: 1 op, 515600.00 ns, 515.6000 us/op
WorkloadResult  10: 1 op, 486800.00 ns, 486.8000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 493.8700 us, StdErr = 3.1695 us (0.64%); N = 10, StdDev = 10.0229 us
Min = 482.3000 us, Q1 = 486.8000 us, Median = 490.5500 us, Q3 = 502.2000 us, Max = 515.6000 us
IQR = 15.4000 us, LowerFence = 463.7000 us, UpperFence = 525.3000 us
ConfidenceInterval = [478.7169 us; 509.0231 us] (CI 99.9%), Margin = 15.1531 us (3.07% of Mean)
Skewness = 0.89, Kurtosis = 2.55, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqSum: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "85ff9dab-d70c-40f7-ac3f-7c83f3589f19.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqSum" --job "Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 4 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\85ff9dab-d70c-40f7-ac3f-7c83f3589f19\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-AFSIGD(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 345200.00 ns, 345.2000 us/op
WorkloadJitting  1: 1 op, 1602200.00 ns, 1.6022 ms/op

OverheadWarmup   1: 1 op, 4900.00 ns, 4.9000 us/op
OverheadWarmup   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 100.00 ns, 100.0000 ns/op
OverheadWarmup   7: 1 op, 300.00 ns, 300.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  11: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  12: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  17: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  18: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 1700.00 ns, 1.7000 us/op

WorkloadWarmup   1: 1 op, 524700.00 ns, 524.7000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 504000.00 ns, 504.0000 us/op
WorkloadActual   2: 1 op, 501500.00 ns, 501.5000 us/op
WorkloadActual   3: 1 op, 506800.00 ns, 506.8000 us/op
WorkloadActual   4: 1 op, 509800.00 ns, 509.8000 us/op
WorkloadActual   5: 1 op, 495900.00 ns, 495.9000 us/op
WorkloadActual   6: 1 op, 499100.00 ns, 499.1000 us/op
WorkloadActual   7: 1 op, 498200.00 ns, 498.2000 us/op
WorkloadActual   8: 1 op, 506000.00 ns, 506.0000 us/op
WorkloadActual   9: 1 op, 540700.00 ns, 540.7000 us/op
WorkloadActual  10: 1 op, 505400.00 ns, 505.4000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 503700.00 ns, 503.7000 us/op
WorkloadResult   2: 1 op, 501200.00 ns, 501.2000 us/op
WorkloadResult   3: 1 op, 506500.00 ns, 506.5000 us/op
WorkloadResult   4: 1 op, 509500.00 ns, 509.5000 us/op
WorkloadResult   5: 1 op, 495600.00 ns, 495.6000 us/op
WorkloadResult   6: 1 op, 498800.00 ns, 498.8000 us/op
WorkloadResult   7: 1 op, 497900.00 ns, 497.9000 us/op
WorkloadResult   8: 1 op, 505700.00 ns, 505.7000 us/op
WorkloadResult   9: 1 op, 505100.00 ns, 505.1000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 502.6667 us, StdErr = 1.5245 us (0.30%); N = 9, StdDev = 4.5736 us
Min = 495.6000 us, Q1 = 498.3500 us, Median = 503.7000 us, Q3 = 506.1000 us, Max = 509.5000 us
IQR = 7.7500 us, LowerFence = 486.7250 us, UpperFence = 517.7250 us
ConfidenceInterval = [494.9811 us; 510.3522 us] (CI 99.9%), Margin = 7.6856 us (1.53% of Mean)
Skewness = -0.12, Kurtosis = 1.46, MValue = 2

Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.csv
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report-github.md
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.html

// * Detailed results *
ArrayAccessMethods.ForCacheArray: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 32.8889 us, StdErr = 0.3935 us (1.20%); N = 9, StdDev = 1.1805 us
Min = 31.7000 us, Q1 = 32.1500 us, Median = 32.3000 us, Q3 = 34.1000 us, Max = 35.0000 us
IQR = 1.9500 us, LowerFence = 29.2250 us, UpperFence = 37.0250 us
ConfidenceInterval = [30.9051 us; 34.8727 us] (CI 99.9%), Margin = 1.9838 us (6.03% of Mean)
Skewness = 0.68, Kurtosis = 1.6, MValue = 2.67
-------------------- Histogram --------------------
[31.503 us ; 32.497 us) | @@@@@@
[32.497 us ; 33.603 us) | 
[33.603 us ; 34.597 us) | @@
[34.597 us ; 35.497 us) | @
---------------------------------------------------

ArrayAccessMethods.For: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 40.8200 us, StdErr = 0.9604 us (2.35%); N = 10, StdDev = 3.0371 us
Min = 36.6000 us, Q1 = 37.9000 us, Median = 41.2500 us, Q3 = 42.6000 us, Max = 45.0000 us
IQR = 4.7000 us, LowerFence = 30.8500 us, UpperFence = 49.6500 us
ConfidenceInterval = [36.2283 us; 45.4117 us] (CI 99.9%), Margin = 4.5917 us (11.25% of Mean)
Skewness = -0.08, Kurtosis = 1.56, MValue = 3.2
-------------------- Histogram --------------------
[36.017 us ; 38.483 us) | @@@
[38.483 us ; 40.367 us) | 
[40.367 us ; 43.767 us) | @@@@@
[43.767 us ; 46.233 us) | @@
---------------------------------------------------

ArrayAccessMethods.ForEach: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 33.9300 us, StdErr = 0.6566 us (1.94%); N = 10, StdDev = 2.0763 us
Min = 32.1000 us, Q1 = 32.3000 us, Median = 32.8000 us, Q3 = 36.0000 us, Max = 37.5000 us
IQR = 3.7000 us, LowerFence = 26.7500 us, UpperFence = 41.5500 us
ConfidenceInterval = [30.7909 us; 37.0691 us] (CI 99.9%), Margin = 3.1391 us (9.25% of Mean)
Skewness = 0.57, Kurtosis = 1.45, MValue = 2.67
-------------------- Histogram --------------------
[31.807 us ; 33.493 us) | @@@@@@
[33.493 us ; 35.443 us) | @
[35.443 us ; 37.593 us) | @@@
---------------------------------------------------

ArrayAccessMethods.LinqAggregate: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 493.8700 us, StdErr = 3.1695 us (0.64%); N = 10, StdDev = 10.0229 us
Min = 482.3000 us, Q1 = 486.8000 us, Median = 490.5500 us, Q3 = 502.2000 us, Max = 515.6000 us
IQR = 15.4000 us, LowerFence = 463.7000 us, UpperFence = 525.3000 us
ConfidenceInterval = [478.7169 us; 509.0231 us] (CI 99.9%), Margin = 15.1531 us (3.07% of Mean)
Skewness = 0.89, Kurtosis = 2.55, MValue = 2
-------------------- Histogram --------------------
[478.229 us ; 494.799 us) | @@@@@@@
[494.799 us ; 507.323 us) | @@
[507.323 us ; 519.671 us) | @
---------------------------------------------------

ArrayAccessMethods.LinqSum: Job-UNANWQ(Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 502.6667 us, StdErr = 1.5245 us (0.30%); N = 9, StdDev = 4.5736 us
Min = 495.6000 us, Q1 = 498.3500 us, Median = 503.7000 us, Q3 = 506.1000 us, Max = 509.5000 us
IQR = 7.7500 us, LowerFence = 486.7250 us, UpperFence = 517.7250 us
ConfidenceInterval = [494.9811 us; 510.3522 us] (CI 99.9%), Margin = 7.6856 us (1.53% of Mean)
Skewness = -0.12, Kurtosis = 1.46, MValue = 2
-------------------- Histogram --------------------
[493.676 us ; 510.151 us) | @@@@@@@@@
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)
Intel Core i7-5820K CPU 3.30GHz (Broadwell), 1 CPU, 12 logical and 6 physical cores
.NET Core SDK=2.2.105
  [Host]     : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
  Job-UNANWQ : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT

Server=True  InvocationCount=1  IterationCount=10  
LaunchCount=1  RunStrategy=Throughput  UnrollFactor=1  
WarmupCount=1  

|        Method |      Mean |     Error |    StdDev | Ratio | RatioSD |
|-------------- |----------:|----------:|----------:|------:|--------:|
| ForCacheArray |  32.89 us |  1.984 us |  1.181 us |  1.00 |    0.00 |
|           For |  40.82 us |  4.592 us |  3.037 us |  1.24 |    0.09 |
|       ForEach |  33.93 us |  3.139 us |  2.076 us |  1.04 |    0.06 |
| LinqAggregate | 493.87 us | 15.153 us | 10.023 us | 15.06 |    0.66 |
|       LinqSum | 502.67 us |  7.686 us |  4.574 us | 15.30 |    0.54 |

// * Warnings *
MinIterationTime
  ArrayAccessMethods.ForCacheArray: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 32.0000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.For: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1           -> The minimum observed iteration time is 36.9000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.ForEach: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 32.3000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqAggregate: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 482.6000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqSum: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 495.9000 us which is very small. It's recommended to increase it.

// * Hints *
Outliers
  ArrayAccessMethods.ForCacheArray: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> 1 outlier  was  removed (66.70 us)
  ArrayAccessMethods.LinqSum: Server=True, InvocationCount=1, IterationCount=10, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> 1 outlier  was  removed (540.70 us)

// * Legends *
  Mean    : Arithmetic mean of all measurements
  Error   : Half of 99.9% confidence interval
  StdDev  : Standard deviation of all measurements
  Ratio   : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])
  1 us    : 1 Microsecond (0.000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:03 (3.12 sec), executed benchmarks: 5

Global total time: 00:00:08 (8.23 sec), executed benchmarks: 5
// * Artifacts cleanup *
