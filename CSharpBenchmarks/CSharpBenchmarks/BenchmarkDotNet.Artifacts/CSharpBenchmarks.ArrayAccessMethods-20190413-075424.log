// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 5 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\6ba96f91-e7a4-4b22-8d83-216ac40a0029
// command took 1,92s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\6ba96f91-e7a4-4b22-8d83-216ac40a0029
// command took 2,83s and exited with 0
// ***** Done, took 00:00:04 (4.9 sec)   *****
// Found 5 benchmarks:
//   ArrayAccessMethods.ForCacheArray: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.For: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.ForEach: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqAggregate: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
//   ArrayAccessMethods.LinqSum: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ArrayAccessMethods.ForCacheArray: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "6ba96f91-e7a4-4b22-8d83-216ac40a0029.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForCacheArray" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 0 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\6ba96f91-e7a4-4b22-8d83-216ac40a0029\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-HXCKKW(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 360200.00 ns, 360.2000 us/op
WorkloadJitting  1: 1 op, 368500.00 ns, 368.5000 us/op

OverheadWarmup   1: 1 op, 4100.00 ns, 4.1000 us/op
OverheadWarmup   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 300.00 ns, 300.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   3: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   9: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 200.00 ns, 200.0000 ns/op

WorkloadWarmup   1: 1 op, 39900.00 ns, 39.9000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 32800.00 ns, 32.8000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 32500.00 ns, 32.5000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 32.5000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 32.5000 us, Q1 = 32.5000 us, Median = 32.5000 us, Q3 = 32.5000 us, Max = 32.5000 us
IQR = 0.0000 us, LowerFence = 32.5000 us, UpperFence = 32.5000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.For: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "6ba96f91-e7a4-4b22-8d83-216ac40a0029.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.For" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 1 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\6ba96f91-e7a4-4b22-8d83-216ac40a0029\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-TYHRTC(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 351800.00 ns, 351.8000 us/op
WorkloadJitting  1: 1 op, 395500.00 ns, 395.5000 us/op

OverheadWarmup   1: 1 op, 5000.00 ns, 5.0000 us/op
OverheadWarmup   2: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   3: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   4: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   7: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   2: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   5: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   7: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual  10: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  11: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  12: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 1700.00 ns, 1.7000 us/op

WorkloadWarmup   1: 1 op, 45100.00 ns, 45.1000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 41500.00 ns, 41.5000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 41200.00 ns, 41.2000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 41.2000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 41.2000 us, Q1 = 41.2000 us, Median = 41.2000 us, Q3 = 41.2000 us, Max = 41.2000 us
IQR = 0.0000 us, LowerFence = 41.2000 us, UpperFence = 41.2000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.ForEach: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "6ba96f91-e7a4-4b22-8d83-216ac40a0029.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.ForEach" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 2 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\6ba96f91-e7a4-4b22-8d83-216ac40a0029\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-TCLWJB(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 367200.00 ns, 367.2000 us/op
WorkloadJitting  1: 1 op, 375100.00 ns, 375.1000 us/op

OverheadWarmup   1: 1 op, 3800.00 ns, 3.8000 us/op
OverheadWarmup   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   5: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   2: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual   3: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   7: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  10: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  11: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  12: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  13: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  14: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  17: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  18: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 100.00 ns, 100.0000 ns/op

WorkloadWarmup   1: 1 op, 35100.00 ns, 35.1000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 33000.00 ns, 33.0000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 32700.00 ns, 32.7000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 32.7000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 32.7000 us, Q1 = 32.7000 us, Median = 32.7000 us, Q3 = 32.7000 us, Max = 32.7000 us
IQR = 0.0000 us, LowerFence = 32.7000 us, UpperFence = 32.7000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqAggregate: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "6ba96f91-e7a4-4b22-8d83-216ac40a0029.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqAggregate" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 3 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\6ba96f91-e7a4-4b22-8d83-216ac40a0029\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-CMPRAV(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 349200.00 ns, 349.2000 us/op
WorkloadJitting  1: 1 op, 1671400.00 ns, 1.6714 ms/op

OverheadWarmup   1: 1 op, 6700.00 ns, 6.7000 us/op
OverheadWarmup   2: 1 op, 600.00 ns, 600.0000 ns/op
OverheadWarmup   3: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   4: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   7: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   8: 1 op, 300.00 ns, 300.0000 ns/op

OverheadActual   1: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual   2: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   3: 1 op, 500.00 ns, 500.0000 ns/op
OverheadActual   4: 1 op, 1700.00 ns, 1.7000 us/op
OverheadActual   5: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual   7: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   8: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   9: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  10: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  11: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  12: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  13: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual  14: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  15: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  16: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  17: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  18: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 300.00 ns, 300.0000 ns/op

WorkloadWarmup   1: 1 op, 499200.00 ns, 499.2000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 496100.00 ns, 496.1000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 495750.00 ns, 495.7500 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 495.7500 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 495.7500 us, Q1 = 495.7500 us, Median = 495.7500 us, Q3 = 495.7500 us, Max = 495.7500 us
IQR = 0.0000 us, LowerFence = 495.7500 us, UpperFence = 495.7500 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

// **************************
// Benchmark: ArrayAccessMethods.LinqSum: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "6ba96f91-e7a4-4b22-8d83-216ac40a0029.dll" --benchmarkName "CSharpBenchmarks.ArrayAccessMethods.LinqSum" --job "Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1" --benchmarkId 4 in E:\git\benchmarks\CSharpBenchmarks\CSharpBenchmarks\bin\Release\netcoreapp2.2\6ba96f91-e7a4-4b22-8d83-216ac40a0029\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
// GC=Concurrent Server
// Job: Job-RCQGFK(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)

OverheadJitting  1: 1 op, 356000.00 ns, 356.0000 us/op
WorkloadJitting  1: 1 op, 1594400.00 ns, 1.5944 ms/op

OverheadWarmup   1: 1 op, 5300.00 ns, 5.3000 us/op
OverheadWarmup   2: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   3: 1 op, 1700.00 ns, 1.7000 us/op
OverheadWarmup   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadWarmup   5: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   6: 1 op, 200.00 ns, 200.0000 ns/op
OverheadWarmup   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadWarmup   8: 1 op, 200.00 ns, 200.0000 ns/op

OverheadActual   1: 1 op, 100.00 ns, 100.0000 ns/op
OverheadActual   2: 1 op, 700.00 ns, 700.0000 ns/op
OverheadActual   3: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   4: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   5: 1 op, 400.00 ns, 400.0000 ns/op
OverheadActual   6: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   7: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   8: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual   9: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  10: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  11: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  12: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  13: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  14: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  15: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  16: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  17: 1 op, 200.00 ns, 200.0000 ns/op
OverheadActual  18: 1 op, 1800.00 ns, 1.8000 us/op
OverheadActual  19: 1 op, 300.00 ns, 300.0000 ns/op
OverheadActual  20: 1 op, 1800.00 ns, 1.8000 us/op

WorkloadWarmup   1: 1 op, 552200.00 ns, 552.2000 us/op

// BeforeActualRun
WorkloadActual   1: 1 op, 502600.00 ns, 502.6000 us/op

// AfterActualRun
WorkloadResult   1: 1 op, 502300.00 ns, 502.3000 us/op
GC:  0 0 0 0 0

// AfterAll

Mean = 502.3000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 502.3000 us, Q1 = 502.3000 us, Median = 502.3000 us, Q3 = 502.3000 us, Max = 502.3000 us
IQR = 0.0000 us, LowerFence = 502.3000 us, UpperFence = 502.3000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2

Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.csv
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report-github.md
  BenchmarkDotNet.Artifacts\results\CSharpBenchmarks.ArrayAccessMethods-report.html

// * Detailed results *
ArrayAccessMethods.ForCacheArray: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 32.5000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 32.5000 us, Q1 = 32.5000 us, Median = 32.5000 us, Q3 = 32.5000 us, Max = 32.5000 us
IQR = 0.0000 us, LowerFence = 32.5000 us, UpperFence = 32.5000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[32.500 us ; 32.501 us) | @
---------------------------------------------------

ArrayAccessMethods.For: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 41.2000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 41.2000 us, Q1 = 41.2000 us, Median = 41.2000 us, Q3 = 41.2000 us, Max = 41.2000 us
IQR = 0.0000 us, LowerFence = 41.2000 us, UpperFence = 41.2000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[41.200 us ; 41.201 us) | @
---------------------------------------------------

ArrayAccessMethods.ForEach: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 32.7000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 32.7000 us, Q1 = 32.7000 us, Median = 32.7000 us, Q3 = 32.7000 us, Max = 32.7000 us
IQR = 0.0000 us, LowerFence = 32.7000 us, UpperFence = 32.7000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[32.700 us ; 32.701 us) | @
---------------------------------------------------

ArrayAccessMethods.LinqAggregate: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 495.7500 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 495.7500 us, Q1 = 495.7500 us, Median = 495.7500 us, Q3 = 495.7500 us, Max = 495.7500 us
IQR = 0.0000 us, LowerFence = 495.7500 us, UpperFence = 495.7500 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[495.750 us ; 495.751 us) | @
---------------------------------------------------

ArrayAccessMethods.LinqSum: Job-AKKBYQ(Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1)
Runtime = .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT; GC = Concurrent Server
Mean = 502.3000 us, StdErr = 0.0000 us (0.00%); N = 1, StdDev = 0.0000 us
Min = 502.3000 us, Q1 = 502.3000 us, Median = 502.3000 us, Q3 = 502.3000 us, Max = 502.3000 us
IQR = 0.0000 us, LowerFence = 502.3000 us, UpperFence = 502.3000 us
ConfidenceInterval = [NaN us; NaN us] (CI 99.9%), Margin = NaN us (NaN% of Mean)
Skewness = NaN, Kurtosis = NaN, MValue = 2
-------------------- Histogram --------------------
[502.300 us ; 502.301 us) | @
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.706 (1803/April2018Update/Redstone4)
Intel Core i7-5820K CPU 3.30GHz (Broadwell), 1 CPU, 12 logical and 6 physical cores
.NET Core SDK=2.2.105
  [Host]     : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT
  Job-AKKBYQ : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT

Server=True  InvocationCount=1  IterationCount=1  
LaunchCount=1  RunStrategy=Throughput  UnrollFactor=1  
WarmupCount=1  

|        Method |      Mean | Error | Ratio |
|-------------- |----------:|------:|------:|
| ForCacheArray |  32.50 us |    NA |  1.00 |
|           For |  41.20 us |    NA |  1.27 |
|       ForEach |  32.70 us |    NA |  1.01 |
| LinqAggregate | 495.75 us |    NA | 15.25 |
|       LinqSum | 502.30 us |    NA | 15.46 |

// * Warnings *
MinIterationTime
  ArrayAccessMethods.ForCacheArray: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 32.8000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.For: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1           -> The minimum observed iteration time is 41.5000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.ForEach: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 33.0000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqAggregate: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1 -> The minimum observed iteration time is 496.1000 us which is very small. It's recommended to increase it.
  ArrayAccessMethods.LinqSum: Server=True, InvocationCount=1, IterationCount=1, LaunchCount=1, RunStrategy=Throughput, UnrollFactor=1, WarmupCount=1       -> The minimum observed iteration time is 502.6000 us which is very small. It's recommended to increase it.

// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  Ratio : Mean of the ratio distribution ([Current]/[Baseline])
  1 us  : 1 Microsecond (0.000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:02 (2.95 sec), executed benchmarks: 5

Global total time: 00:00:07 (7.85 sec), executed benchmarks: 5
// * Artifacts cleanup *
